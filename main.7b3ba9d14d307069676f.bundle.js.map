{"version":3,"file":"main.7b3ba9d14d307069676f.bundle.js","sources":["webpack:///./packages/asc-core/src/theme/index.ts","webpack:///./packages/asc-ui/src/components/Button/Button.stories.tsx","webpack:///./packages/asc-ui/src/components/List/ListStyle.ts","webpack:///./packages/asc-ui/src/components/Menu/Menu.stories.tsx","webpack:///./packages/asc-ui/src/components/Modal/Modal.stories.tsx","webpack:///./packages/asc-ui/src/components/TopBar/TopBar.stories.tsx","webpack:///./packages/asc-ui/src/components/ImageCard/ImageCardContent/ImageCardContentStyle.ts","webpack:///./packages/asc-ui/src/components/AmsterdamLogo/AmsterdamLogoStyle.ts","webpack:///./packages/asc-ui/src/components/Card/CardMediaStyle.ts","webpack:///./packages/asc-ui/src/components/Button/ShareButton/ShareButtonStyle.ts","webpack:///./packages/asc-ui/src/components/Button/ShareButton/ShareButton.tsx","webpack:///./packages/asc-ui/src/components/FilterOption/FilterOptionStyle.ts","webpack:///./packages/asc-ui/src/components/Editorial/EditorialPost/EditorialPostStyle.ts","webpack:///./packages/asc-ui/src/components/Checkbox/CheckboxStyle.ts","webpack:///./packages/asc-ui/src/components/CustomHTMLBlock/CustomHTMLBlockStyle.ts","webpack:///./packages/asc-ui/src/components/FormLabelStyle/FormLabelStyle.ts","webpack:///./packages/asc-ui/src/components/TextField/TextField.tsx","webpack:///./packages/asc-ui/src/components/Header/HeaderStyle.ts","webpack:///./packages/asc-ui/src/components/Header/HeaderTitleStyle.ts","webpack:///./packages/asc-ui/src/components/Header/HeaderNavigationStyle.ts","webpack:///./packages/asc-ui/src/components/Header/HeaderWrapperStyle.ts","webpack:///./packages/asc-ui/src/components/Header/HeaderTitle.tsx","webpack:///./packages/asc-ui/src/components/Editorial/EditorialBody/EditorialBodyStyle.ts","webpack:///./packages/asc-ui/src/components/Blockquote/BlockquoteStyle.ts","webpack:///./packages/asc-ui/src/components/Editorial/EditorialContent/EditorialContentStyle.ts","webpack:///./packages/asc-ui/src/components/Card/CardActionsStyle.ts","webpack:///./packages/asc-ui/src/components/Card/CardContentStyle.ts","webpack:///./packages/asc-ui/src/components/List/ListItemStyle.ts","webpack:///./packages/asc-ui/src/components/Header/HeaderLogoTextStyle.ts","webpack:///./packages/asc-ui/src/components/SearchBar/SearchBarStyle.ts","webpack:///./packages/asc-ui/src/components/TextField/TextFieldStyle.ts","webpack:///./packages/asc-ui/src/components/Spinner/SpinnerStyle.tsx","webpack:///./packages/asc-ui/src/components/Spinner/Spinner.tsx","webpack:///./packages/asc-ui/src/components/ImageCard/ImageCardStyle.ts","webpack:///./packages/asc-ui/src/components/FilterBox/FilterBoxStyle.ts","webpack:///./packages/asc-ui/src/components/FilterBox/FilterBox.tsx","webpack:///./packages/asc-ui/src/components/Label/LabelStyle.ts","webpack:///./packages/asc-ui/src/components/Tag/TagStyle.ts","webpack:///./packages/asc-ui/src/components/FilterTag/FilterTagStyle.ts","webpack:///./packages/asc-ui/src/components/Button/ToggleButton/ToggleButtonStyle.ts","webpack:///./packages/asc-ui/src/components/DocumentCover/DocumentCoverStyle.ts","webpack:///./packages/asc-ui/src/components/DocumentCover/DocumentCoverContent/DocumentCoverContentStyle.ts","webpack:///./packages/asc-ui/src/components/DocumentCover/DocumentCover.tsx","webpack:///./packages/asc-ui/src/components/BackDrop/BackDropStyle.ts","webpack:///./packages/asc-ui/src/components/Input/InputStyle.ts","webpack:///./packages/asc-ui/src/components/BackgroundImage/BackgroundImageStyle.ts","webpack:///./packages/asc-ui/src/components/List/OrderedListStyle.ts","webpack:///./packages/asc-ui/src/components/Image/ImageStyle.ts","webpack:///./packages/asc-ui/src/components/Grid/ColumnStyle.tsx","webpack:///./packages/asc-ui/src/components/Grid/RowStyle.ts","webpack:///./packages/asc-ui/src/components/Editorial/EditorialSidebar/EditorialSidebarStyle.ts","webpack:///./packages/asc-ui/src/components/Header/HeaderLinksStyle.ts","webpack:///./packages/asc-ui/src/components/Toggle/ToggleStyle.ts","webpack:///./packages/asc-ui/src/components/SearchBarToggle/SearchBarToggleStyle.ts","webpack:///./packages/asc-ui/src/components/Modal/ModalStyle.ts","webpack:///./packages/asc-ui/src/components/Editorial/Article/ArticleStyle.ts","webpack:///./packages/asc-ui/src/components/ContextMenu/ContextMenuButtonStyle.ts","webpack:///./packages/asc-ui/src/components/ContextMenu/ContextMenuButton.tsx","webpack:///./packages/asc-ui/src/components/ContextMenu/ContextMenuListStyle.ts","webpack:///./packages/asc-ui/src/components/ContextMenu/ContextMenuItemStyle.ts","webpack:///./packages/asc-ui/src/components/Divider/DividerStyle.ts","webpack:///./packages/asc-ui/src/components/GlobalStyle/GlobalStyle.ts","webpack:///./packages/asc-ui/src/components/Menu/MenuItem/MenuItem.tsx","webpack:///./packages/asc-ui/src/components/Menu/MenuList/MenuListStyle.ts","webpack:///./packages/asc-ui/src/components/Menu/MenuFlyOut/MenuFlyOutStyle.ts","webpack:///./packages/asc-ui/src/components/Menu/constants.ts","webpack:///./packages/asc-ui/src/components/Menu/MenuButton/MenuButtonStyle.ts","webpack:///./packages/asc-ui/src/components/Menu/MenuItemTitle/MenuItemTitleStyle.ts","webpack:///./packages/asc-ui/src/components/Menu/MenuToggle/MenuToggleStyle.ts","webpack:///./packages/asc-ui/src/components/Menu/MenuInline/MenuInlineStyle.ts","webpack:///./packages/asc-ui/src/components/Menu/MenuInline/MenuInline.tsx","webpack:///./packages/asc-ui/src/components/deprecated/IconButton/IconButtonStyle.ts","webpack:///./packages/asc-ui/src/components/Radio/RadioItemStyle.ts","webpack:///./packages/asc-ui/src/components/Radio/RadioLabelStyle.ts","webpack:///./packages/asc-ui/src/components/Radio/RadioGroupStyle.ts","webpack:///./packages/asc-ui/src/components/Radio/Radio.tsx","webpack:///./packages/asc-ui/src/components/Footer/FooterBottom/FooterBottomStyle.ts","webpack:///./packages/asc-ui/src/components/Footer/FooterContent/FooterContentStyle.ts","webpack:///./packages/asc-ui/src/components/Footer/FooterHeading/FooterHeadingStyle.ts","webpack:///./packages/asc-ui/src/components/Footer/FooterHeading/FooterHeading.tsx","webpack:///./packages/asc-ui/src/components/Footer/FooterStyle.ts","webpack:///./packages/asc-ui/src/components/Footer/FooterTop/FooterTopStyle.ts","webpack:///./packages/asc-ui/src/components/Footer/FooterLinkList/FooterLinkListItem.tsx","webpack:///./packages/asc-ui/src/components/Footer/FooterLinkList/FooterBottomLinkListItem.tsx","webpack:///./packages/asc-ui/src/components/Footer/FooterToggle/ToggleFooterHeader.tsx","webpack:///./packages/asc-ui/src/components/Footer/FooterToggle/FooterToggle.tsx","webpack:///./packages/asc-ui/src/components/Icon/IconStyle.ts","webpack:///./packages/asc-ui/src/components/Button/ButtonStyle.ts","webpack:///./packages/asc-ui/src/components/Card/CardStyle.ts","webpack:///./packages/asc-ui/src/components/Card/CardContainerStyle.ts","webpack:///./packages/asc-ui/src/components/Card/Card.tsx","webpack:///./packages/asc-ui/src/utils/themeUtils.ts","webpack:///./packages/asc-ui/src/components/Heading/HeadingStyle.ts","webpack:///./packages/asc-ui/src/components/Link/LinkStyle.ts","webpack:///./packages/asc-ui/src/components/Grid/GridItemStyle.ts","webpack:///./packages/asc-ui/src/components/Grid/GridContainerStyle.ts","webpack:///./packages/asc-ui/src/components/Grid/ContainerStyle.ts","webpack:///./packages/asc-ui/src/components/Grid/Container.tsx","webpack:///./packages/asc-ui/src/components/Editorial/EditorialMetaList/EditorialMetaListStyle.ts","webpack:///./packages/asc-ui/src/components/Paragraph/ParagraphStyle.ts","webpack:///./packages/asc-ui/src/components/TopBar/TopBarStyle.ts","webpack:///./packages/asc-ui/src/components/Typography/TypographyStyle.ts"],"sourcesContent":["/* eslint-disable no-useless-constructor, no-empty-function */\nimport { CSSProp } from 'styled-components'\n\nexport namespace Theme {\n  export type ColorType =\n    | 'primary'\n    | 'secondary'\n    | 'bright'\n    | 'tint'\n    | 'none'\n    | 'support'\n    | 'default'\n\n  export type GlobalStyleType = string\n\n  export type TypeBreakpoint = 'min-width' | 'max-width'\n\n  export interface GetBreakpointFunc {\n    (type: Theme.TypeBreakpoint): string\n  }\n\n  export type TypeSpan = { [key: string]: number } | number\n\n  export interface LayoutInterface {\n    [key: string]: {\n      columns: number\n      gutter?: number\n      margin?: number\n      max?: number\n      min?: number\n    }\n  }\n\n  export type Spacing = number\n\n  export interface BreakpointsInterface {\n    mobileS: GetBreakpointFunc\n    mobileM: GetBreakpointFunc\n    mobileL: GetBreakpointFunc\n    tabletS: GetBreakpointFunc\n    tabletM: GetBreakpointFunc\n    laptop: GetBreakpointFunc\n    laptopM: GetBreakpointFunc\n    laptopL: GetBreakpointFunc\n    desktop: GetBreakpointFunc\n    desktopL: GetBreakpointFunc\n  }\n\n  export interface GridInterface {\n    xLarge: LayoutInterface\n    large: LayoutInterface\n    big: LayoutInterface\n    medium: LayoutInterface\n    small: LayoutInterface\n  }\n\n  export interface PaletteInterface {\n    light?: string\n    dark?: string\n    main: string\n  }\n\n  export interface SupportPaletteInterface {\n    valid: string\n    invalid: string\n    focus: string\n  }\n\n  export type Tint = {\n    level1: string\n    level2: string\n    level3: string\n    level4: string\n    level5: string\n    level6: string\n    level7: string\n  }\n\n  export interface ColorTypeInterface {\n    primary: PaletteInterface\n    secondary: PaletteInterface\n    error: PaletteInterface\n    tint: Tint\n    support: SupportPaletteInterface\n    bright: PaletteInterface\n  }\n\n  export interface ColorSubtypeInterface\n    extends Tint,\n      PaletteInterface,\n      SupportPaletteInterface {}\n\n  export type TypographyElementStyle = {\n    color: CSSProp\n    fontWeight: 400 | 500 | 700 | 'inherit'\n    fontSize: CSSProp\n    lineHeight: number | CSSProp\n    letterSpacing: CSSProp\n    marginBottom: CSSProp\n  }\n\n  export interface TypographyType extends Partial<TypographyElementStyle> {\n    breakpoints?: {\n      [key in keyof BreakpointsInterface]?: Partial<TypographyElementStyle>\n    }\n  }\n\n  export interface TypographyElements {\n    h1: TypographyType\n    h2: TypographyType\n    h3: TypographyType\n    h4: TypographyType\n    h5: TypographyType\n    h6: TypographyType\n    p: TypographyType\n    li: TypographyType\n    a: TypographyType\n    em: TypographyType\n    small: TypographyType\n    span: TypographyType\n  }\n\n  export interface TypographyInterface extends Partial<TypographyElements> {\n    fontFamily?: string\n    fontSize?: string\n  }\n\n  export interface ThemeInterface {\n    breakpoints: Partial<BreakpointsInterface>\n    colors: Partial<ColorTypeInterface>\n    globalStyle: Partial<GlobalStyleType>\n    typography: Partial<TypographyInterface>\n    layouts: Partial<LayoutInterface>\n    maxGridWidth: number\n    maxContainerWidth: number\n    spacing: Spacing\n  }\n\n  export class ThemeFactory implements ThemeInterface {\n    static createTheme(themeName: string): ThemeInterface {\n      /* eslint-disable global-require, import/no-dynamic-require */\n      const breakpoints = require(`./${themeName}/breakpoints`).default\n      const colors = require(`./${themeName}/colors`).default\n      const globalStyle = require(`./${themeName}/globalStyle`).default\n      const typography = require(`./${themeName}/typography`).default\n      const layouts = require(`./${themeName}/layouts`).default\n      const {\n        maxGridWidth,\n        maxContainerWidth,\n      } = require(`./${themeName}/layouts`)\n      const spacing = require(`./${themeName}/spacing`).default\n      /* eslint-enable global-require, import/no-dynamic-require */\n      return new ThemeFactory(\n        breakpoints,\n        colors,\n        globalStyle,\n        typography,\n        layouts,\n        maxGridWidth,\n        maxContainerWidth,\n        spacing,\n      )\n    }\n\n    constructor(\n      public breakpoints: BreakpointsInterface,\n      public colors: ColorTypeInterface,\n      public globalStyle: GlobalStyleType,\n      public typography: TypographyInterface,\n      public layouts: LayoutInterface,\n      public maxGridWidth: number,\n      public maxContainerWidth: number,\n      public spacing: Spacing,\n    ) {}\n  }\n}\n","\n  // @ts-ignore\n  var withSourceLoader = require('@storybook/source-loader/preview').withSource;\n  // @ts-ignore\n  var __SOURCE_PREFIX__ = \"/home/travis/build/Amsterdam/amsterdam-styled-components/packages/asc-ui/src/components/Button\";\n  // @ts-ignore\n  var __STORY__ = \"import styled from '@datapunt/asc-core'\\nimport {\\n  Download,\\n  ChevronRight,\\n  ChevronLeft,\\n  Close,\\n  Facebook,\\n  Twitter,\\n  Linkedin,\\n  Email,\\n  Enlarge,\\n  Print,\\n} from '@datapunt/asc-assets'\\nimport { storiesOf } from '@storybook/react'\\nimport * as React from 'react'\\nimport Button from './Button'\\nimport ShareButton from './ShareButton'\\n\\nconst ButtonBar = styled.div<{}>`\\n  display: flex;\\n  height: 100px;\\n\\n  & > * {\\n    margin-right: 5px;\\n  }\\n`\\n\\nstoriesOf('Atoms/Buttons', module)\\n  .addDecorator(storyFn => (\\n    <div style={{ padding: '40px 10px' }}>{storyFn()}</div>\\n  ))\\n  .add('[deprecated] variants', () => (\\n    <ButtonBar>\\n      <Button>Default button</Button>\\n      <Button color=\\\"primary\\\">Primary button</Button>\\n      <Button color=\\\"secondary\\\">Secondary button</Button>\\n    </ButtonBar>\\n  ))\\n  .add('variants', () => (\\n    <ButtonBar>\\n      <Button variant=\\\"primary\\\">Default button</Button>\\n      <Button variant=\\\"application\\\" iconLeft={<Enlarge />} iconSize={10}>\\n        Application button\\n      </Button>\\n      <Button\\n        variant=\\\"secondary\\\"\\n        iconLeft={<Download />}\\n        iconRight={<ChevronRight />}\\n      >\\n        Download button\\n      </Button>\\n      <Button variant=\\\"secondary\\\" taskflow>\\n        Taskflow button\\n      </Button>\\n      <Button variant=\\\"tertiary\\\" iconRight={<ChevronRight />}>\\n        Download button\\n      </Button>\\n      <Button variant=\\\"primaryInverted\\\" iconLeft={<ChevronRight />}>\\n        Download button\\n      </Button>\\n      <Button variant=\\\"textButton\\\" iconLeft={<ChevronLeft />} iconSize={14}>\\n        Text button\\n      </Button>\\n    </ButtonBar>\\n  ))\\n  .add('variants - disabled', () => (\\n    <ButtonBar>\\n      <Button disabled variant=\\\"primary\\\">\\n        Default button\\n      </Button>\\n      <Button\\n        disabled\\n        variant=\\\"secondary\\\"\\n        iconLeft={<Download />}\\n        iconRight={<ChevronRight />}\\n      >\\n        Download button\\n      </Button>\\n      <Button disabled variant=\\\"tertiary\\\" iconRight={<ChevronRight />}>\\n        Download button\\n      </Button>\\n      <Button disabled variant=\\\"primaryInverted\\\" iconLeft={<ChevronRight />}>\\n        Download button\\n      </Button>\\n      <Button disabled variant=\\\"secondary\\\" taskflow>\\n        Taskflow button\\n      </Button>\\n      <Button\\n        disabled\\n        variant=\\\"textButton\\\"\\n        iconLeft={<ChevronLeft />}\\n        iconSize={14}\\n      >\\n        Text button\\n      </Button>\\n    </ButtonBar>\\n  ))\\n  .add('with only an icon', () => (\\n    <>\\n      <Button size={30} variant=\\\"blank\\\" icon={<ChevronRight />} />\\n      <Button size={60} variant=\\\"blank\\\" iconSize={40} icon={<Close />} />\\n    </>\\n  ))\\n  .add('social buttons', () => (\\n    <ButtonBar>\\n      <ShareButton hoverColor=\\\"#3b5999\\\" iconSize={30}>\\n        <Facebook />\\n      </ShareButton>\\n      <ShareButton hoverColor=\\\"#55acee\\\">\\n        <Twitter />\\n      </ShareButton>\\n      <ShareButton hoverColor=\\\"#0077B5\\\">\\n        <Linkedin />\\n      </ShareButton>\\n      <ShareButton>\\n        <Email />\\n      </ShareButton>\\n      <ShareButton>\\n        <Print />\\n      </ShareButton>\\n    </ButtonBar>\\n  ))\\n\";\n  // @ts-ignore\n  var __ADDS_MAP__ = {\"atoms-buttons--social-buttons\":{\"startLoc\":{\"col\":7,\"line\":104},\"endLoc\":{\"col\":3,\"line\":122},\"startBody\":{\"col\":25,\"line\":104},\"endBody\":{\"col\":3,\"line\":122}},\"atoms-buttons--with-only-an-icon\":{\"startLoc\":{\"col\":7,\"line\":98},\"endLoc\":{\"col\":3,\"line\":103},\"startBody\":{\"col\":28,\"line\":98},\"endBody\":{\"col\":3,\"line\":103}},\"atoms-buttons--variants-disabled\":{\"startLoc\":{\"col\":7,\"line\":66},\"endLoc\":{\"col\":3,\"line\":97},\"startBody\":{\"col\":30,\"line\":66},\"endBody\":{\"col\":3,\"line\":97}},\"atoms-buttons--variants\":{\"startLoc\":{\"col\":7,\"line\":39},\"endLoc\":{\"col\":3,\"line\":65},\"startBody\":{\"col\":19,\"line\":39},\"endBody\":{\"col\":3,\"line\":65}},\"atoms-buttons--deprecated-variants\":{\"startLoc\":{\"col\":7,\"line\":32},\"endLoc\":{\"col\":3,\"line\":38},\"startBody\":{\"col\":32,\"line\":32},\"endBody\":{\"col\":3,\"line\":38}}};\n  // @ts-ignore\n  var __MAIN_FILE_LOCATION__ = \"/Button.stories.tsx\";\n  // @ts-ignore\n  var __MODULE_DEPENDENCIES__ = [];\n  // @ts-ignore\n  var __LOCAL_DEPENDENCIES__ = {};\n  // @ts-ignore\n  var __IDS_TO_FRAMEWORKS__ = {};\n\n  import styled from '@datapunt/asc-core'\nimport {\n  Download,\n  ChevronRight,\n  ChevronLeft,\n  Close,\n  Facebook,\n  Twitter,\n  Linkedin,\n  Email,\n  Enlarge,\n  Print,\n} from '@datapunt/asc-assets'\nimport { storiesOf } from '@storybook/react'\nimport * as React from 'react'\nimport Button from './Button'\nimport ShareButton from './ShareButton'\n\nconst ButtonBar = styled.div<{}>`\n  display: flex;\n  height: 100px;\n\n  & > * {\n    margin-right: 5px;\n  }\n`\n\nstoriesOf('Atoms/Buttons', module).addParameters({ storySource: { source: __STORY__, locationsMap: __ADDS_MAP__ } }).addDecorator(withSourceLoader(__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__))\n  .addDecorator(storyFn => (\n    <div style={{ padding: '40px 10px' }}>{storyFn()}</div>\n  ))\n  .add('[deprecated] variants', () => (\n    <ButtonBar>\n      <Button>Default button</Button>\n      <Button color=\"primary\">Primary button</Button>\n      <Button color=\"secondary\">Secondary button</Button>\n    </ButtonBar>\n  ))\n  .add('variants', () => (\n    <ButtonBar>\n      <Button variant=\"primary\">Default button</Button>\n      <Button variant=\"application\" iconLeft={<Enlarge />} iconSize={10}>\n        Application button\n      </Button>\n      <Button\n        variant=\"secondary\"\n        iconLeft={<Download />}\n        iconRight={<ChevronRight />}\n      >\n        Download button\n      </Button>\n      <Button variant=\"secondary\" taskflow>\n        Taskflow button\n      </Button>\n      <Button variant=\"tertiary\" iconRight={<ChevronRight />}>\n        Download button\n      </Button>\n      <Button variant=\"primaryInverted\" iconLeft={<ChevronRight />}>\n        Download button\n      </Button>\n      <Button variant=\"textButton\" iconLeft={<ChevronLeft />} iconSize={14}>\n        Text button\n      </Button>\n    </ButtonBar>\n  ))\n  .add('variants - disabled', () => (\n    <ButtonBar>\n      <Button disabled variant=\"primary\">\n        Default button\n      </Button>\n      <Button\n        disabled\n        variant=\"secondary\"\n        iconLeft={<Download />}\n        iconRight={<ChevronRight />}\n      >\n        Download button\n      </Button>\n      <Button disabled variant=\"tertiary\" iconRight={<ChevronRight />}>\n        Download button\n      </Button>\n      <Button disabled variant=\"primaryInverted\" iconLeft={<ChevronRight />}>\n        Download button\n      </Button>\n      <Button disabled variant=\"secondary\" taskflow>\n        Taskflow button\n      </Button>\n      <Button\n        disabled\n        variant=\"textButton\"\n        iconLeft={<ChevronLeft />}\n        iconSize={14}\n      >\n        Text button\n      </Button>\n    </ButtonBar>\n  ))\n  .add('with only an icon', () => (\n    <>\n      <Button size={30} variant=\"blank\" icon={<ChevronRight />} />\n      <Button size={60} variant=\"blank\" iconSize={40} icon={<Close />} />\n    </>\n  ))\n  .add('social buttons', () => (\n    <ButtonBar>\n      <ShareButton hoverColor=\"#3b5999\" iconSize={30}>\n        <Facebook />\n      </ShareButton>\n      <ShareButton hoverColor=\"#55acee\">\n        <Twitter />\n      </ShareButton>\n      <ShareButton hoverColor=\"#0077B5\">\n        <Linkedin />\n      </ShareButton>\n      <ShareButton>\n        <Email />\n      </ShareButton>\n      <ShareButton>\n        <Print />\n      </ShareButton>\n    </ButtonBar>\n  ))\n\n  ","import styled, { css } from '@datapunt/asc-core'\nimport { stripUnit } from 'polished'\nimport { themeColor, themeSpacing, getTypographyFromTheme } from '../../utils'\nimport { getTypographyValueFromProperty } from '../../utils/themeUtils'\n\nexport type Props = {\n  variant?: 'bullet'\n}\n\nconst BULLET_SIZE = 8\nconst BULLET_MARGIN = 16\n\nexport const BulletCSS = css`\n  margin-left: ${BULLET_MARGIN + BULLET_SIZE}px;\n\n  li {\n    /* Unfortunately we target the element instead of the style. This because we have to target the LI if it's rendered in CustomHTMLBlock */\n    position: relative;\n    ${({ theme }) => getTypographyFromTheme()({ as: 'li', theme })};\n\n    &::before {\n      content: '';\n      position: absolute;\n      width: ${BULLET_SIZE}px;\n      height: ${BULLET_SIZE}px;\n      background-color: ${themeColor('tint', 'level7')};\n      left: -${BULLET_MARGIN + BULLET_SIZE}px;\n      top: ${({ theme }) =>\n        `${(stripUnit(\n          getTypographyValueFromProperty('li', 'lineHeight')({\n            theme,\n          }),\n        ) -\n          BULLET_SIZE) /\n          2}px`};\n    }\n  }\n`\n\nconst getVariant = () => ({ variant }: Props) => {\n  switch (variant /* Switch statement because more variants to be added */) {\n    case 'bullet':\n      return BulletCSS\n\n    default:\n      return css``\n  }\n}\n\nexport const ListStyleCSS = css`\n  list-style: none;\n  background-color: ${themeColor('tint', 'level1')};\n  margin: ${themeSpacing(0, 0, 6, 0)};\n  padding: 0;\n`\n\nexport default styled.ul<Props>`\n  display: flex;\n  flex-direction: column;\n  ${ListStyleCSS}\n  ${getVariant()}\n`\ntry {\n    // @ts-ignore\n    ListStyle.displayName = \"ListStyle\";\n    // @ts-ignore\n    ListStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ListStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLUListElement) => void) | RefObject<HTMLUListElement>\" } }, \"variant\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"variant\", \"required\": false, \"type\": { \"name\": \"\\\"bullet\\\"\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/List/ListStyle.ts#ListStyle\"] = { docgenInfo: ListStyle.__docgenInfo, name: \"ListStyle\", path: \"packages/asc-ui/src/components/List/ListStyle.ts#ListStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\n  // @ts-ignore\n  var withSourceLoader = require('@storybook/source-loader/preview').withSource;\n  // @ts-ignore\n  var __SOURCE_PREFIX__ = \"/home/travis/build/Amsterdam/amsterdam-styled-components/packages/asc-ui/src/components/Menu\";\n  // @ts-ignore\n  var __STORY__ = \"import React from 'react'\\nimport styled from '@datapunt/asc-core'\\nimport { ChevronRight } from '@datapunt/asc-assets'\\nimport { storiesOf } from '@storybook/react'\\nimport {\\n  MenuFlyOut,\\n  MenuItem,\\n  MenuButton,\\n  MenuItemTitle,\\n  MenuInline,\\n  MenuToggle,\\n  themeColor,\\n} from '../../index'\\n\\nconst ReactRouterLink: React.FC<any> = ({\\n  children,\\n  reactRouterProp,\\n  ...otherProps\\n}) => (\\n  <a {...otherProps} data-attr={reactRouterProp}>\\n    {children}\\n  </a>\\n)\\n\\nconst StyledReactRouterLink: React.FC<any> = ({ children, ...otherProps }) => (\\n  <MenuButton $as={ReactRouterLink} {...otherProps}>\\n    {children}\\n  </MenuButton>\\n)\\n\\nconst StyledMenuInline = styled(MenuInline)`\\n  background-color: ${themeColor('tint', 'level2')};\\n`\\n\\n\\nexport const MenuChildren = () => (\\n  <>\\n    <MenuItem>\\n      <MenuButton $as=\\\"a\\\" href=\\\"/\\\" active>\\n        Home\\n      </MenuButton>\\n    </MenuItem>\\n    <MenuItem>\\n      <StyledReactRouterLink reactRouterProp=\\\"hello!\\\" $as=\\\"a\\\" href=\\\"/\\\">\\n        Shop\\n      </StyledReactRouterLink>\\n    </MenuItem>\\n    <MenuFlyOut label=\\\"Submenu!\\\">\\n      <MenuItem>\\n        <MenuButton $as=\\\"a\\\" href=\\\"/\\\" iconLeft={<ChevronRight />}>\\n          Space Bear 6\\n        </MenuButton>\\n      </MenuItem>\\n      <MenuItem>\\n        <MenuButton $as=\\\"a\\\" href=\\\"/\\\" iconLeft={<ChevronRight />}>\\n          Space Bear 6 Plus\\n        </MenuButton>\\n      </MenuItem>\\n      <MenuItemTitle>Just a menu title</MenuItemTitle>\\n      <MenuItem>\\n        <MenuButton\\n          onClick={() => {\\n            \\n            alert('Hello!')\\n          }}\\n          iconLeft={<ChevronRight />}\\n        >\\n          This triggers an alert!\\n        </MenuButton>\\n      </MenuItem>\\n    </MenuFlyOut>\\n    <MenuFlyOut label=\\\"Submenu!\\\">\\n      <MenuItem>\\n        <MenuButton $as=\\\"a\\\" href=\\\"/\\\" iconLeft={<ChevronRight />}>\\n          Space Bear 6\\n        </MenuButton>\\n      </MenuItem>\\n      <MenuItem>\\n        <MenuButton $as=\\\"a\\\" href=\\\"/\\\" iconLeft={<ChevronRight />}>\\n          Space Bear 6 Plus\\n        </MenuButton>\\n      </MenuItem>\\n      <MenuItemTitle>Just a menu title</MenuItemTitle>\\n      <MenuItem>\\n        <MenuButton\\n          onClick={() => {\\n            \\n            alert('Hello!')\\n          }}\\n          iconLeft={<ChevronRight />}\\n        >\\n          This triggers an alert!\\n        </MenuButton>\\n      </MenuItem>\\n    </MenuFlyOut>\\n    <MenuItem>\\n      <MenuButton $as=\\\"a\\\" href=\\\"/\\\">\\n        Contact\\n      </MenuButton>\\n    </MenuItem>\\n  </>\\n)\\n\\nstoriesOf('Composed/Menu', module)\\n  .add('default', () => (\\n    <StyledMenuInline>\\n      <MenuChildren />\\n    </StyledMenuInline>\\n  ))\\n  .add('default with backdrop', () => (\\n    <StyledMenuInline hasBackDrop>\\n      <MenuChildren />\\n    </StyledMenuInline>\\n  ))\\n  .add('toggle', () => (\\n    <MenuToggle>\\n      <MenuChildren />\\n    </MenuToggle>\\n  ))\\n  .add('toggle with backdrop', () => (\\n    <MenuToggle hasBackDrop>\\n      <MenuChildren />\\n    </MenuToggle>\\n  ))\\n\";\n  // @ts-ignore\n  var __ADDS_MAP__ = {\"composed-menu--toggle-with-backdrop\":{\"startLoc\":{\"col\":7,\"line\":120},\"endLoc\":{\"col\":3,\"line\":124},\"startBody\":{\"col\":31,\"line\":120},\"endBody\":{\"col\":3,\"line\":124}},\"composed-menu--toggle\":{\"startLoc\":{\"col\":7,\"line\":115},\"endLoc\":{\"col\":3,\"line\":119},\"startBody\":{\"col\":17,\"line\":115},\"endBody\":{\"col\":3,\"line\":119}},\"composed-menu--default-with-backdrop\":{\"startLoc\":{\"col\":7,\"line\":110},\"endLoc\":{\"col\":3,\"line\":114},\"startBody\":{\"col\":32,\"line\":110},\"endBody\":{\"col\":3,\"line\":114}},\"composed-menu--default\":{\"startLoc\":{\"col\":7,\"line\":105},\"endLoc\":{\"col\":3,\"line\":109},\"startBody\":{\"col\":18,\"line\":105},\"endBody\":{\"col\":3,\"line\":109}}};\n  // @ts-ignore\n  var __MAIN_FILE_LOCATION__ = \"/Menu.stories.tsx\";\n  // @ts-ignore\n  var __MODULE_DEPENDENCIES__ = [];\n  // @ts-ignore\n  var __LOCAL_DEPENDENCIES__ = {};\n  // @ts-ignore\n  var __IDS_TO_FRAMEWORKS__ = {};\n\n  import React from 'react'\nimport styled from '@datapunt/asc-core'\nimport { ChevronRight } from '@datapunt/asc-assets'\nimport { storiesOf } from '@storybook/react'\nimport {\n  MenuFlyOut,\n  MenuItem,\n  MenuButton,\n  MenuItemTitle,\n  MenuInline,\n  MenuToggle,\n  themeColor,\n} from '../../index'\n\nconst ReactRouterLink: React.FC<any> = ({\n  children,\n  reactRouterProp,\n  ...otherProps\n}) => (\n  <a {...otherProps} data-attr={reactRouterProp}>\n    {children}\n  </a>\n)\n\nconst StyledReactRouterLink: React.FC<any> = ({ children, ...otherProps }) => (\n  <MenuButton $as={ReactRouterLink} {...otherProps}>\n    {children}\n  </MenuButton>\n)\n\nconst StyledMenuInline = styled(MenuInline)`\n  background-color: ${themeColor('tint', 'level2')};\n`\n\n// eslint-disable-next-line import/prefer-default-export\nexport const MenuChildren = () => (\n  <>\n    <MenuItem>\n      <MenuButton $as=\"a\" href=\"/\" active>\n        Home\n      </MenuButton>\n    </MenuItem>\n    <MenuItem>\n      <StyledReactRouterLink reactRouterProp=\"hello!\" $as=\"a\" href=\"/\">\n        Shop\n      </StyledReactRouterLink>\n    </MenuItem>\n    <MenuFlyOut label=\"Submenu!\">\n      <MenuItem>\n        <MenuButton $as=\"a\" href=\"/\" iconLeft={<ChevronRight />}>\n          Space Bear 6\n        </MenuButton>\n      </MenuItem>\n      <MenuItem>\n        <MenuButton $as=\"a\" href=\"/\" iconLeft={<ChevronRight />}>\n          Space Bear 6 Plus\n        </MenuButton>\n      </MenuItem>\n      <MenuItemTitle>Just a menu title</MenuItemTitle>\n      <MenuItem>\n        <MenuButton\n          onClick={() => {\n            // eslint-disable-next-line no-undef,no-alert\n            alert('Hello!')\n          }}\n          iconLeft={<ChevronRight />}\n        >\n          This triggers an alert!\n        </MenuButton>\n      </MenuItem>\n    </MenuFlyOut>\n    <MenuFlyOut label=\"Submenu!\">\n      <MenuItem>\n        <MenuButton $as=\"a\" href=\"/\" iconLeft={<ChevronRight />}>\n          Space Bear 6\n        </MenuButton>\n      </MenuItem>\n      <MenuItem>\n        <MenuButton $as=\"a\" href=\"/\" iconLeft={<ChevronRight />}>\n          Space Bear 6 Plus\n        </MenuButton>\n      </MenuItem>\n      <MenuItemTitle>Just a menu title</MenuItemTitle>\n      <MenuItem>\n        <MenuButton\n          onClick={() => {\n            // eslint-disable-next-line no-undef,no-alert\n            alert('Hello!')\n          }}\n          iconLeft={<ChevronRight />}\n        >\n          This triggers an alert!\n        </MenuButton>\n      </MenuItem>\n    </MenuFlyOut>\n    <MenuItem>\n      <MenuButton $as=\"a\" href=\"/\">\n        Contact\n      </MenuButton>\n    </MenuItem>\n  </>\n)\n\nstoriesOf('Composed/Menu', module).addParameters({ storySource: { source: __STORY__, locationsMap: __ADDS_MAP__ } }).addDecorator(withSourceLoader(__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__))\n  .add('default', () => (\n    <StyledMenuInline>\n      <MenuChildren />\n    </StyledMenuInline>\n  ))\n  .add('default with backdrop', () => (\n    <StyledMenuInline hasBackDrop>\n      <MenuChildren />\n    </StyledMenuInline>\n  ))\n  .add('toggle', () => (\n    <MenuToggle>\n      <MenuChildren />\n    </MenuToggle>\n  ))\n  .add('toggle with backdrop', () => (\n    <MenuToggle hasBackDrop>\n      <MenuChildren />\n    </MenuToggle>\n  ))\n\n  ","\n  // @ts-ignore\n  var withSourceLoader = require('@storybook/source-loader/preview').withSource;\n  // @ts-ignore\n  var __SOURCE_PREFIX__ = \"/home/travis/build/Amsterdam/amsterdam-styled-components/packages/asc-ui/src/components/Modal\";\n  // @ts-ignore\n  var __STORY__ = \"import * as React from 'react'\\nimport { storiesOf } from '@storybook/react'\\nimport styled from '@datapunt/asc-core'\\nimport { linkTo } from '@storybook/addon-links'\\nimport { withKnobs, number } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { Close } from '@datapunt/asc-assets'\\nimport { Props } from './Modal'\\nimport { Modal, Button, Divider, TopBar, Paragraph, Heading } from '../..'\\nimport Link from '../Link/Link'\\nimport Icon from '../Icon'\\n\\nconst ModalBlock = styled.div`\\n  display: block;\\n  padding: 0 15px;\\n  margin: 15px 0;\\n`\\n\\nconst SimpleModal: React.FC<Props> = props => (\\n  <div>\\n    Lorem ipsum dolor.\\n    <Modal\\n      aria-labelledby=\\\"modal\\\"\\n      {...props}\\n      onClose={linkTo('Modal', 'closed state')}\\n    >\\n      <ModalBlock>\\n        <Paragraph>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto,\\n          quisquam!\\n        </Paragraph>\\n      </ModalBlock>\\n    </Modal>\\n  </div>\\n)\\n\\nstoriesOf('Composed/Modal', module)\\n  .addDecorator(withKnobs)\\n  .add('default state', () => <SimpleModal open />)\\n  .add('backdrop opacity', () => (\\n    <SimpleModal\\n      open\\n      backdropOpacity={number('backdropOpacity', 0.2, {\\n        range: true,\\n        min: 0,\\n        max: 1,\\n        step: 0.1,\\n      })}\\n    />\\n  ))\\n  .add('with blurred background', () => (\\n    <SimpleModal blurredNodeSelector=\\\"#root\\\" open />\\n  ))\\n  .add('closed state', () => <SimpleModal open={false} />)\\n  .add('implementation for dataportaal', () => (\\n    <Modal\\n      open\\n      aria-labelledby=\\\"feedback\\\"\\n      aria-describedby=\\\"feedback\\\"\\n      onClose={action('close modal from escape button or click outside')}\\n    >\\n      <TopBar>\\n        <Heading $as=\\\"h4\\\" style={{ flexGrow: 1 }}>\\n          Feedback\\n          <Button\\n            type=\\\"button\\\"\\n            size={30}\\n            onClick={action('close modal')}\\n            variant=\\\"blank\\\"\\n          >\\n            <Icon size={20}>\\n              <Close />\\n            </Icon>\\n          </Button>\\n        </Heading>\\n      </TopBar>\\n      <Divider />\\n      <ModalBlock>\\n        <Heading $as=\\\"h4\\\">Onjuiste of ontbrekende gegevens?</Heading>\\n        <Paragraph>\\n          Geef aan welke gegevens onjuist zijn of ontbreken. Ook als je weet wat\\n          het wel moet zijn. We horen het graag.\\n        </Paragraph>\\n        <Button variant=\\\"primary\\\" onClick={action('click')}>\\n          Terugmelden\\n        </Button>\\n      </ModalBlock>\\n      <Divider gutter />\\n      <ModalBlock>\\n        <Heading $as=\\\"h4\\\">Vraag of een klacht?</Heading>\\n        <Paragraph>\\n          Als iets op deze pagina niet goed werkt, onduidelijk is of vragen\\n          oproept, geef het aan ons door.\\n        </Paragraph>\\n        <Button variant=\\\"primary\\\" onClick={action('click')}>\\n          Probleem melden\\n        </Button>\\n      </ModalBlock>\\n      <Divider transparent />\\n      <ModalBlock>\\n        <Link href=\\\"/help\\\" variant=\\\"inline\\\">\\n          Hulp nodig?\\n        </Link>\\n      </ModalBlock>\\n    </Modal>\\n  ))\\n\";\n  // @ts-ignore\n  var __ADDS_MAP__ = {\"composed-modal--implementation-for-dataportaal\":{\"startLoc\":{\"col\":7,\"line\":55},\"endLoc\":{\"col\":3,\"line\":106},\"startBody\":{\"col\":41,\"line\":55},\"endBody\":{\"col\":3,\"line\":106}},\"composed-modal--closed-state\":{\"startLoc\":{\"col\":7,\"line\":54},\"endLoc\":{\"col\":57,\"line\":54},\"startBody\":{\"col\":23,\"line\":54},\"endBody\":{\"col\":57,\"line\":54}},\"composed-modal--with-blurred-background\":{\"startLoc\":{\"col\":7,\"line\":51},\"endLoc\":{\"col\":3,\"line\":53},\"startBody\":{\"col\":34,\"line\":51},\"endBody\":{\"col\":3,\"line\":53}},\"composed-modal--backdrop-opacity\":{\"startLoc\":{\"col\":7,\"line\":40},\"endLoc\":{\"col\":3,\"line\":50},\"startBody\":{\"col\":27,\"line\":40},\"endBody\":{\"col\":3,\"line\":50}},\"composed-modal--default-state\":{\"startLoc\":{\"col\":7,\"line\":39},\"endLoc\":{\"col\":50,\"line\":39},\"startBody\":{\"col\":24,\"line\":39},\"endBody\":{\"col\":50,\"line\":39}}};\n  // @ts-ignore\n  var __MAIN_FILE_LOCATION__ = \"/Modal.stories.tsx\";\n  // @ts-ignore\n  var __MODULE_DEPENDENCIES__ = [];\n  // @ts-ignore\n  var __LOCAL_DEPENDENCIES__ = {};\n  // @ts-ignore\n  var __IDS_TO_FRAMEWORKS__ = {};\n\n  import * as React from 'react'\nimport { storiesOf } from '@storybook/react'\nimport styled from '@datapunt/asc-core'\nimport { linkTo } from '@storybook/addon-links'\nimport { withKnobs, number } from '@storybook/addon-knobs'\nimport { action } from '@storybook/addon-actions'\nimport { Close } from '@datapunt/asc-assets'\nimport { Props } from './Modal'\nimport { Modal, Button, Divider, TopBar, Paragraph, Heading } from '../..'\nimport Link from '../Link/Link'\nimport Icon from '../Icon'\n\nconst ModalBlock = styled.div`\n  display: block;\n  padding: 0 15px;\n  margin: 15px 0;\n`\n\nconst SimpleModal: React.FC<Props> = props => (\n  <div>\n    Lorem ipsum dolor.\n    <Modal\n      aria-labelledby=\"modal\"\n      {...props}\n      onClose={linkTo('Modal', 'closed state')}\n    >\n      <ModalBlock>\n        <Paragraph>\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto,\n          quisquam!\n        </Paragraph>\n      </ModalBlock>\n    </Modal>\n  </div>\n)\n\nstoriesOf('Composed/Modal', module).addParameters({ storySource: { source: __STORY__, locationsMap: __ADDS_MAP__ } }).addDecorator(withSourceLoader(__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__))\n  .addDecorator(withKnobs)\n  .add('default state', () => <SimpleModal open />)\n  .add('backdrop opacity', () => (\n    <SimpleModal\n      open\n      backdropOpacity={number('backdropOpacity', 0.2, {\n        range: true,\n        min: 0,\n        max: 1,\n        step: 0.1,\n      })}\n    />\n  ))\n  .add('with blurred background', () => (\n    <SimpleModal blurredNodeSelector=\"#root\" open />\n  ))\n  .add('closed state', () => <SimpleModal open={false} />)\n  .add('implementation for dataportaal', () => (\n    <Modal\n      open\n      aria-labelledby=\"feedback\"\n      aria-describedby=\"feedback\"\n      onClose={action('close modal from escape button or click outside')}\n    >\n      <TopBar>\n        <Heading $as=\"h4\" style={{ flexGrow: 1 }}>\n          Feedback\n          <Button\n            type=\"button\"\n            size={30}\n            onClick={action('close modal')}\n            variant=\"blank\"\n          >\n            <Icon size={20}>\n              <Close />\n            </Icon>\n          </Button>\n        </Heading>\n      </TopBar>\n      <Divider />\n      <ModalBlock>\n        <Heading $as=\"h4\">Onjuiste of ontbrekende gegevens?</Heading>\n        <Paragraph>\n          Geef aan welke gegevens onjuist zijn of ontbreken. Ook als je weet wat\n          het wel moet zijn. We horen het graag.\n        </Paragraph>\n        <Button variant=\"primary\" onClick={action('click')}>\n          Terugmelden\n        </Button>\n      </ModalBlock>\n      <Divider gutter />\n      <ModalBlock>\n        <Heading $as=\"h4\">Vraag of een klacht?</Heading>\n        <Paragraph>\n          Als iets op deze pagina niet goed werkt, onduidelijk is of vragen\n          oproept, geef het aan ons door.\n        </Paragraph>\n        <Button variant=\"primary\" onClick={action('click')}>\n          Probleem melden\n        </Button>\n      </ModalBlock>\n      <Divider transparent />\n      <ModalBlock>\n        <Link href=\"/help\" variant=\"inline\">\n          Hulp nodig?\n        </Link>\n      </ModalBlock>\n    </Modal>\n  ))\n\n  ","\n  // @ts-ignore\n  var withSourceLoader = require('@storybook/source-loader/preview').withSource;\n  // @ts-ignore\n  var __SOURCE_PREFIX__ = \"/home/travis/build/Amsterdam/amsterdam-styled-components/packages/asc-ui/src/components/TopBar\";\n  // @ts-ignore\n  var __STORY__ = \"import styled from '@datapunt/asc-core'\\nimport * as React from 'react'\\nimport { storiesOf } from '@storybook/react'\\nimport { action } from '@storybook/addon-actions'\\nimport { Close } from '@datapunt/asc-assets'\\nimport TopBar from './TopBar'\\nimport Heading from '../Heading'\\nimport Button from '../Button'\\nimport Icon from '../Icon'\\n\\nconst backgroundColor = '#E6E6E6'\\n\\nconst HeadingStyled = styled(Heading)`\\n  flex-grow: 1;\\n`\\n\\nstoriesOf('Atoms/TopBar', module)\\n  .addDecorator(storyFn => (\\n    <div style={{ padding: '40px 10px' }}>{storyFn()}</div>\\n  ))\\n  .add('default state', () => (\\n    <TopBar>\\n      <HeadingStyled as=\\\"h4\\\">\\n        TopBar\\n        <Button\\n          size={30}\\n          variant=\\\"blank\\\"\\n          aria-label=\\\"Close\\\"\\n          onClick={action('close')}\\n        >\\n          <Icon>\\n            <Close />\\n          </Icon>\\n        </Button>\\n      </HeadingStyled>\\n    </TopBar>\\n  ))\\n  .add('with background color', () => (\\n    <TopBar backgroundColor={backgroundColor}>\\n      <HeadingStyled as=\\\"h4\\\">\\n        TopBar - with backgroundColor property set\\n        <Button\\n          size={30}\\n          variant=\\\"blank\\\"\\n          aria-label=\\\"Close\\\"\\n          onClick={action('close')}\\n        >\\n          <Icon>\\n            <Close />\\n          </Icon>\\n        </Button>\\n      </HeadingStyled>\\n    </TopBar>\\n  ))\\n\";\n  // @ts-ignore\n  var __ADDS_MAP__ = {\"atoms-topbar--with-background-color\":{\"startLoc\":{\"col\":7,\"line\":38},\"endLoc\":{\"col\":3,\"line\":54},\"startBody\":{\"col\":32,\"line\":38},\"endBody\":{\"col\":3,\"line\":54}},\"atoms-topbar--default-state\":{\"startLoc\":{\"col\":7,\"line\":21},\"endLoc\":{\"col\":3,\"line\":37},\"startBody\":{\"col\":24,\"line\":21},\"endBody\":{\"col\":3,\"line\":37}}};\n  // @ts-ignore\n  var __MAIN_FILE_LOCATION__ = \"/TopBar.stories.tsx\";\n  // @ts-ignore\n  var __MODULE_DEPENDENCIES__ = [];\n  // @ts-ignore\n  var __LOCAL_DEPENDENCIES__ = {};\n  // @ts-ignore\n  var __IDS_TO_FRAMEWORKS__ = {};\n\n  import styled from '@datapunt/asc-core'\nimport * as React from 'react'\nimport { storiesOf } from '@storybook/react'\nimport { action } from '@storybook/addon-actions'\nimport { Close } from '@datapunt/asc-assets'\nimport TopBar from './TopBar'\nimport Heading from '../Heading'\nimport Button from '../Button'\nimport Icon from '../Icon'\n\nconst backgroundColor = '#E6E6E6'\n\nconst HeadingStyled = styled(Heading)`\n  flex-grow: 1;\n`\n\nstoriesOf('Atoms/TopBar', module).addParameters({ storySource: { source: __STORY__, locationsMap: __ADDS_MAP__ } }).addDecorator(withSourceLoader(__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__))\n  .addDecorator(storyFn => (\n    <div style={{ padding: '40px 10px' }}>{storyFn()}</div>\n  ))\n  .add('default state', () => (\n    <TopBar>\n      <HeadingStyled as=\"h4\">\n        TopBar\n        <Button\n          size={30}\n          variant=\"blank\"\n          aria-label=\"Close\"\n          onClick={action('close')}\n        >\n          <Icon>\n            <Close />\n          </Icon>\n        </Button>\n      </HeadingStyled>\n    </TopBar>\n  ))\n  .add('with background color', () => (\n    <TopBar backgroundColor={backgroundColor}>\n      <HeadingStyled as=\"h4\">\n        TopBar - with backgroundColor property set\n        <Button\n          size={30}\n          variant=\"blank\"\n          aria-label=\"Close\"\n          onClick={action('close')}\n        >\n          <Icon>\n            <Close />\n          </Icon>\n        </Button>\n      </HeadingStyled>\n    </TopBar>\n  ))\n\n  ","import styled from '@datapunt/asc-core'\nimport { themeColor, breakpoint } from '../../../utils'\n\nexport default styled.div`\n  padding: 8px 14px;\n  background-color: ${themeColor('tint', 'level1')};\n  position: absolute;\n  bottom: 56px;\n  left: 0;\n  max-width: calc(100% - 44px);\n  word-break: break-word;\n\n  @media screen and ${breakpoint('min-width', 'tabletM')} {\n    padding: 16px;\n  }\n`\ntry {\n    // @ts-ignore\n    ImageCardContentStyle.displayName = \"ImageCardContentStyle\";\n    // @ts-ignore\n    ImageCardContentStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ImageCardContentStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/ImageCard/ImageCardContent/ImageCardContentStyle.ts#ImageCardContentStyle\"] = { docgenInfo: ImageCardContentStyle.__docgenInfo, name: \"ImageCardContentStyle\", path: \"packages/asc-ui/src/components/ImageCard/ImageCardContent/ImageCardContentStyle.ts#ImageCardContentStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { svg } from '@datapunt/asc-assets'\nimport styled, { css } from '@datapunt/asc-core'\nimport { breakpoint, focusStyleOutline } from '../../utils'\n\nexport type Props = {\n  tall?: boolean\n}\n\nexport const LogoStyle = styled.span`\n  display: block;\n  height: 100%;\n  width: 100%;\n  background-size: cover;\n  background-image: url(\"${svg.LogoShort}\");\n`\n\nconst tallStyle = css`\n  @media screen and ${breakpoint('min-width', 'laptopM')} {\n    height: 68px;\n    width: 100px;\n\n    ${LogoStyle} {\n      background-image: url(\"${svg.LogoTall}\");\n    }\n  }\n`\n\nconst AmsterdamLogoStyle = styled.a<Props>`\n  display: inline-block;\n  height: 30px;\n  width: 68px;\n  flex-shrink: 0;\n  ${focusStyleOutline()}\n  ${({ tall }) => tall && tallStyle}\n`\n\nexport default AmsterdamLogoStyle\ntry {\n    // @ts-ignore\n    LogoStyle.displayName = \"LogoStyle\";\n    // @ts-ignore\n    LogoStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"LogoStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLSpanElement) => void) | RefObject<HTMLSpanElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/AmsterdamLogo/AmsterdamLogoStyle.ts#LogoStyle\"] = { docgenInfo: LogoStyle.__docgenInfo, name: \"LogoStyle\", path: \"packages/asc-ui/src/components/AmsterdamLogo/AmsterdamLogoStyle.ts#LogoStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { Theme } from '@datapunt/asc-core'\nimport { themeColor } from '../../utils'\n\nexport type Props = {\n  backgroundColor?: keyof Theme.Tint\n  maxWidth?: number\n}\n\nexport const CardMediaWrapperStyle = styled.div<Props>`\n  background-color: ${({ backgroundColor, theme }) =>\n    themeColor('tint', backgroundColor || 'level1')({ theme })};\n  position: relative;\n  overflow: hidden;\n  line-height: 0;\n  display: flex;\n  width: ${({ maxWidth }) => (maxWidth ? `${maxWidth}px` : '100%')};\n  flex: ${({ maxWidth }) => (maxWidth ? `0 0 ${maxWidth}px` : 'auto')};\n  align-self: stretch;\n\n  &::before {\n    content: '';\n    display: block;\n    padding-top: 100%;\n  }\n`\n\nconst CardMediaStyle = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n`\n\nexport default CardMediaStyle\ntry {\n    // @ts-ignore\n    CardMediaWrapperStyle.displayName = \"CardMediaWrapperStyle\";\n    // @ts-ignore\n    CardMediaWrapperStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"CardMediaWrapperStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"backgroundColor\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"backgroundColor\", \"required\": false, \"type\": { \"name\": \"\\\"level5\\\" | \\\"level1\\\" | \\\"level7\\\" | \\\"level6\\\" | \\\"level4\\\" | \\\"level3\\\" | \\\"level2\\\"\" } }, \"maxWidth\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"maxWidth\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Card/CardMediaStyle.ts#CardMediaWrapperStyle\"] = { docgenInfo: CardMediaWrapperStyle.__docgenInfo, name: \"CardMediaWrapperStyle\", path: \"packages/asc-ui/src/components/Card/CardMediaStyle.ts#CardMediaWrapperStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport IconStyle from '../../Icon/IconStyle'\nimport { themeColor, svgFill } from '../../../utils'\nimport ButtonStyle, { Props as ButtonProps } from '../ButtonStyle'\n\nexport type Props = {\n  hoverColor?: string\n} & ButtonProps\n\nconst ShareButtonStyle = styled(ButtonStyle)<Props>`\n  padding: 0;\n  position: relative;\n  justify-content: center;\n  background: ${themeColor('tint', 'level5')};\n\n  &:focus,\n  &:hover {\n    background: ${({ hoverColor }) => hoverColor || themeColor('secondary')};\n  }\n\n  ${IconStyle} {\n    ${svgFill('tint', 'level1')};\n  }\n`\n\nexport default ShareButtonStyle\n","import React from 'react'\nimport Icon from '../../Icon'\nimport ShareButtonStyle, {\n  Props as ShareButtonStyleProps,\n} from './ShareButtonStyle'\n\ntype Props = {\n  iconSize?: number\n} & ShareButtonStyleProps &\n  React.HTMLAttributes<HTMLButtonElement>\n\nconst ShareButton: React.FC<Props> = ({\n  children,\n  onClick,\n  iconSize,\n  ...otherProps\n}) => (\n  <ShareButtonStyle\n    data-testid=\"share-button\"\n    size={30}\n    onClick={onClick}\n    variant=\"blank\"\n    {...otherProps}\n  >\n    <Icon size={iconSize}>{children}</Icon>\n  </ShareButtonStyle>\n)\n\nexport default ShareButton\n","import styled, { css } from '@datapunt/asc-core'\nimport { themeColor, themeSpacing } from '../../utils'\nimport { getFocusStyle } from '../../utils/themeUtils'\n\nexport type Props = {\n  active?: boolean\n}\n\nexport default styled.a<Props>`\n  display: block;\n  padding: ${themeSpacing(3)};\n  border-left: 4px solid transparent;\n  font-weight: 400;\n  color: ${themeColor('tint', 'level7')};\n  text-decoration: none;\n  font-size: 16px;\n  ${({ active }) =>\n    active\n      ? css`\n          font-weight: 700;\n          border-color: ${themeColor('primary')};\n          outline: 1px solid ${themeColor('primary')};\n        `\n      : css`\n          &:hover {\n            color: ${themeColor('secondary')};\n            border-bottom: 1px solid;\n            margin-bottom: -1px; // prevents moving the content below because of border-bottom\n          }\n          &:focus {\n            ${getFocusStyle('fill')};\n          }\n        `};\n`\ntry {\n    // @ts-ignore\n    FilterOptionStyle.displayName = \"FilterOptionStyle\";\n    // @ts-ignore\n    FilterOptionStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"FilterOptionStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLAnchorElement) => void) | RefObject<HTMLAnchorElement>\" } }, \"active\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"active\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/FilterOption/FilterOptionStyle.ts#FilterOptionStyle\"] = { docgenInfo: FilterOptionStyle.__docgenInfo, name: \"FilterOptionStyle\", path: \"packages/asc-ui/src/components/FilterOption/FilterOptionStyle.ts#FilterOptionStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport { breakpoint, themeColor } from '../../../utils'\nimport BackgroundImageStyle from '../../BackgroundImage/BackgroundImageStyle'\nimport EditorialContentStyle from '../EditorialContent/EditorialContentStyle'\n\nexport type Props = {\n  hasImage: boolean\n}\n\nexport const EDITORIAL_PADDING_TOP = 32\n\nexport default styled.section<Props>`\n  width: 100%;\n  color: ${themeColor('tint', 'level6')};\n  background-color: ${themeColor('tint', 'level1')};\n  ${({ hasImage }) =>\n    hasImage &&\n    css`\n      margin-top: 0;\n      ${EditorialContentStyle} {\n        margin-top: ${EDITORIAL_PADDING_TOP * 0.75}px;\n        @media screen and ${breakpoint('min-width', 'tabletM')} {\n          margin-top: ${EDITORIAL_PADDING_TOP}px;\n        }\n      }\n    `}\n\n  ${BackgroundImageStyle} {\n    max-height: 560px;\n    min-height: 250px;\n  }\n`\ntry {\n    // @ts-ignore\n    EditorialPostStyle.displayName = \"EditorialPostStyle\";\n    // @ts-ignore\n    EditorialPostStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"EditorialPostStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLElement) => void) | RefObject<HTMLElement>\" } }, \"hasImage\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"hasImage\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Editorial/EditorialPost/EditorialPostStyle.ts#EditorialPostStyle\"] = { docgenInfo: EditorialPostStyle.__docgenInfo, name: \"EditorialPostStyle\", path: \"packages/asc-ui/src/components/Editorial/EditorialPost/EditorialPostStyle.ts#EditorialPostStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport { themeColor, focusStyleOutline, svgFill } from '../../utils'\nimport { IconStyle } from '../Icon'\nimport { ButtonVariants } from '../Button/ButtonStyle'\nimport { outlineStyle } from '../../utils/themeUtils'\n\nenum Variants {\n  primary,\n  secondary,\n  tertiary,\n}\n\nexport type Props = {\n  variant?: keyof typeof Variants\n  checked?: boolean\n  disabled?: boolean\n  error?: boolean\n}\n\nconst getVariant = () => ({\n  variant,\n}: {\n  variant?: keyof typeof ButtonVariants\n}) => {\n  switch (variant) {\n    case 'primary':\n      return css`\n        color: ${themeColor('primary', 'main')};\n        background-color: ${themeColor('primary', 'main')};\n        ${svgFill('tint', 'level1')};\n      `\n\n    case 'secondary':\n      return css`\n        color: ${themeColor('secondary', 'main')};\n        background-color: ${themeColor('secondary', 'main')};\n        ${svgFill('tint', 'level1')};\n      `\n\n    case 'tertiary':\n      return css`\n        color: ${themeColor('tint', 'level7')};\n        background-color: ${themeColor('tint', 'level1')};\n        ${svgFill('tint', 'level7')};\n      `\n\n    default:\n      return css`\n        color: ${themeColor('tint', 'level7')};\n        background-color: ${themeColor('tint', 'level7')};\n        ${svgFill('tint', 'level1')};\n      `\n  }\n}\n\nexport default styled.input.attrs({\n  type: 'checkbox',\n})<Props>`\n  top: 0;\n  left: 0;\n  width: 100%;\n  cursor: inherit;\n  height: 100%;\n  margin: 0;\n  opacity: 0;\n  padding: 0;\n  position: absolute;\n`\n\nconst CheckboxIconStyle = styled(IconStyle)<Props>`\n  display: flex;\n  border-width: 1px;\n  border-style: solid;\n  width: 22px;\n  height: 22px;\n  position: relative;\n  justify-content: center;\n  align-items: center;\n  transition: background-color 0.2s ease-in-out;\n  ${({ checked }) =>\n    checked &&\n    css`\n      ${getVariant()};\n    `}\n`\n\nconst CheckboxWrapperStyle = styled.div<Props & { focus: boolean }>`\n  position: relative;\n  display: inline-flex;\n  user-select: none;  \n  vertical-align: middle;\n  margin-bottom: 1px;\n  padding: 6px;\n  flex-shrink: 0; /* IE11 fix */\n  color: ${themeColor('tint', 'level5')};\n  ${({ focus, theme }) =>\n    focus &&\n    css`\n      ${CheckboxIconStyle} {\n        ${outlineStyle(theme, 2, 1)};\n      }\n    `}\n  ${({ disabled }) =>\n    disabled &&\n    css`\n      pointer-events: none;\n    `}\n  ${({ checked, disabled, focus }) =>\n    !checked &&\n    !disabled && // IE11 fix. If an element is disabled, you can still hover on it on IE11.\n    !focus && // don't override the outline if element is also focussed\n    css`\n      &:hover {\n        color: ${themeColor('tint', 'level7')};\n\n        ${CheckboxIconStyle} {\n          outline-style: solid;\n          outline-width: 1px;\n        }\n      }\n    `}\n    ${({ error, checked, disabled, focus }) =>\n      error &&\n      !checked &&\n      !disabled &&\n      !focus &&\n      css`\n        ${CheckboxIconStyle} {\n          border-color: red;\n          outline: 1px solid red;\n        }\n      `}\n  ${focusStyleOutline()}\n`\n\nexport { CheckboxWrapperStyle, CheckboxIconStyle }\ntry {\n    // @ts-ignore\n    CheckboxStyle.displayName = \"CheckboxStyle\";\n    // @ts-ignore\n    CheckboxStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"CheckboxStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>\" } }, \"variant\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"variant\", \"required\": false, \"type\": { \"name\": \"\\\"primary\\\" | \\\"secondary\\\" | \\\"tertiary\\\"\" } }, \"error\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"error\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Checkbox/CheckboxStyle.ts#CheckboxStyle\"] = { docgenInfo: CheckboxStyle.__docgenInfo, name: \"CheckboxStyle\", path: \"packages/asc-ui/src/components/Checkbox/CheckboxStyle.ts#CheckboxStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport { HeaderStyleCSS } from '../Heading/HeadingStyle'\nimport { InlineLinkStyleCSS } from '../Link/LinkStyle'\nimport { ParagraphStyleCSS } from '../Paragraph/ParagraphStyle'\nimport { getTypographyFromTheme } from '../../utils'\nimport { BulletCSS, ListStyleCSS } from '../List/ListStyle'\nimport { ListItemStyleCSS } from '../List/ListItemStyle'\nimport { BlockquoteStyleCSS } from '../Blockquote/BlockquoteStyle'\nimport { OrderedListStyleCSS } from '../List/OrderedListStyle'\n\nconst ElementStyleMapping = {\n  h1: HeaderStyleCSS,\n  h2: HeaderStyleCSS,\n  h3: HeaderStyleCSS,\n  h4: HeaderStyleCSS,\n  h5: HeaderStyleCSS,\n  h6: HeaderStyleCSS,\n  a: InlineLinkStyleCSS,\n  p: ParagraphStyleCSS,\n  blockquote: BlockquoteStyleCSS,\n  // Default variant bullet when rendered in CustomHTMLBlock\n  ul: css`\n    ${ListStyleCSS}\n    ${BulletCSS}\n  `,\n  ol: css`\n    ${OrderedListStyleCSS}\n  `,\n  li: ListItemStyleCSS,\n}\n\nexport default styled.div`\n  ${Object.entries(ElementStyleMapping).map(\n    ([element, style]) => css`\n      ${element} {\n        ${({ theme }) => getTypographyFromTheme()({ as: element, theme })};\n        ${style}\n      }\n    `,\n  )}\n\n  img,\n  video {\n    max-width: 100%;\n    margin: 24px auto;\n  }\n`\ntry {\n    // @ts-ignore\n    CustomHTMLBlockStyle.displayName = \"CustomHTMLBlockStyle\";\n    // @ts-ignore\n    CustomHTMLBlockStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"CustomHTMLBlockStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/CustomHTMLBlock/CustomHTMLBlockStyle.ts#CustomHTMLBlockStyle\"] = { docgenInfo: CustomHTMLBlockStyle.__docgenInfo, name: \"CustomHTMLBlockStyle\", path: \"packages/asc-ui/src/components/CustomHTMLBlock/CustomHTMLBlockStyle.ts#CustomHTMLBlockStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { srOnlyStyle } from '../../utils'\n\ninterface IProps {\n  htmlFor?: string\n  srOnly: boolean\n}\n\nconst FormLabelStyle = styled.label.attrs<IProps>(({ htmlFor }: IProps) => {\n  return {\n    type: 'text',\n    htmlFor,\n  }\n})`\n  ${srOnlyStyle()}\n`\n\nexport default FormLabelStyle\n","import * as React from 'react'\nimport { useUID } from 'react-uid'\nimport { Close } from '@datapunt/asc-assets'\nimport FormLabelStyle from '../FormLabelStyle'\nimport TextFieldStyle from './TextFieldStyle'\nimport Input, { InputProps } from '../Input'\nimport Button from '../Button'\nimport Icon from '../Icon'\n\nexport interface TextFieldProps extends InputProps {\n  label?: string\n  keepFocus?: boolean\n  srOnly: boolean\n  onClear?: Function\n}\n\nconst TextField = ({\n  label,\n  srOnly,\n  onClear,\n  value,\n  keepFocus,\n  blurOnEscape,\n  focusOnRender,\n  ...otherProps\n}: TextFieldProps) => {\n  const uid = useUID()\n  return (\n    <TextFieldStyle>\n      <FormLabelStyle htmlFor={uid} srOnly={srOnly}>\n        {label}\n      </FormLabelStyle>\n      <Input\n        {...{ keepFocus, value, blurOnEscape, focusOnRender }}\n        {...otherProps}\n        id={uid}\n      />\n      {onClear && value && (\n        <Button\n          size={30}\n          variant=\"blank\"\n          type=\"button\"\n          aria-label=\"Close\"\n          onClick={() => onClear()}\n        >\n          <Icon>\n            <Close />\n          </Icon>\n        </Button>\n      )}\n    </TextFieldStyle>\n  )\n}\n\nTextField.defaultProps = {\n  srOnly: false,\n  canClear: true,\n}\n\nexport default TextField\ntry {\n    // @ts-ignore\n    TextField.displayName = \"TextField\";\n    // @ts-ignore\n    TextField.__docgenInfo = { \"description\": \"\", \"displayName\": \"TextField\", \"props\": { \"label\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"keepFocus\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"keepFocus\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"srOnly\": { \"defaultValue\": { value: false }, \"description\": \"\", \"name\": \"srOnly\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onClear\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onClear\", \"required\": false, \"type\": { \"name\": \"Function\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/TextField/TextField.tsx#TextField\"] = { docgenInfo: TextField.__docgenInfo, name: \"TextField\", path: \"packages/asc-ui/src/components/TextField/TextField.tsx#TextField\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport TopBarStyle from '../TopBar/TopBarStyle'\nimport { getValueFromTheme } from '../../utils'\n\nexport type Props = {\n  fullWidth?: boolean\n}\n\nconst HeaderStyle = styled(TopBarStyle)<Props>`\n  flex-wrap: nowrap;\n  height: 100%;\n  margin: 0 auto;\n  padding: 0 10px;\n  align-items: stretch;\n  max-width: ${({ fullWidth, theme }) =>\n    fullWidth ? 'none' : `${getValueFromTheme('maxGridWidth')({ theme })}px`};\n`\n\nexport default HeaderStyle\n","import styled from '@datapunt/asc-core'\nimport { breakpoint } from '../../utils'\nimport Link from '../Link'\n\nconst HeaderTitleStyle = styled(Link)`\n  margin: ${({ tall }) => (tall ? '0px' : '0px')};\n  display: inline-flex;\n  color: #000;\n  text-decoration: none;\n\n  &:hover {\n    color: inherit;\n  }\n\n  @media screen and ${breakpoint('max-width', 'mobileM')} {\n    font-size: 14px;\n  }\n\n  @media screen and ${breakpoint('min-width', 'mobileM')} {\n    font-size: 16px;\n  }\n`\nexport default HeaderTitleStyle\n","import styled from '@datapunt/asc-core'\n\nconst HeaderNavigationStyle = styled.nav`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  height: 100%;\n`\n\nexport default HeaderNavigationStyle\n","import styled, { css } from '@datapunt/asc-core'\nimport {\n  breakpoint,\n  themeColor,\n  customCss,\n  CustomCssPropsInterface,\n  themeSpacing,\n} from '../../utils'\nimport HeaderTitleStyle from './HeaderTitleStyle'\nimport HeaderNavigationStyle from './HeaderNavigationStyle'\nimport HeaderLogoTextStyle from './HeaderLogoTextStyle'\nimport TopBarStyle from '../TopBar/TopBarStyle'\nimport HeaderStyle from './HeaderStyle'\nimport { HEADER_HEIGHT_SMALL } from '../shared/constants'\n\nexport interface Props extends CustomCssPropsInterface {\n  tall?: boolean\n}\n\nconst shortStyle = css`\n  ${HeaderTitleStyle} {\n    margin-top: -2px; /* hack to align text with logo */\n  }\n\n  ${HeaderStyle} {\n    height: 50px;\n    padding-right: 0; /* collapse to the right side to align navigation items to the edge */\n  }\n`\n\nconst HeaderWrapperStyle = styled.div<Props>`\n  background-color: ${themeColor('tint', 'level1')};\n  margin: 0 auto;\n  width: 100%;\n  box-shadow: 0 4px rgba(0, 0, 0, 0.04);\n  box-sizing: content-box;\n  position: sticky;\n  top: 0;\n\n  ${HeaderNavigationStyle} {\n    flex-grow: 1;\n    @media screen and ${breakpoint('min-width', 'mobileM')} {\n      margin-left: ${themeSpacing(4)};\n    }\n  }\n\n  ${({ tall }) =>\n    tall\n      ? css`\n          @media screen and ${breakpoint('max-width', 'laptopM')} {\n            ${shortStyle}\n          }\n          @media screen and ${breakpoint('min-width', 'laptopM')} {\n            box-shadow: none;\n            position: relative;\n\n            &:after {\n              content: '';\n              display: block;\n              left: 0;\n              right: 0;\n              height: ${HEADER_HEIGHT_SMALL}px;\n              margin-top: ${HEADER_HEIGHT_SMALL * -1}px;\n              background-color: ${themeColor('tint', 'level2')};\n            }\n\n            ${HeaderStyle} {\n              flex-wrap: wrap;\n            }\n\n            ${TopBarStyle} {\n              background-color: transparent;\n            }\n\n            ${HeaderTitleStyle} {\n              margin-top: 0px;\n              align-self: flex-start;\n              line-height: 38px;\n              font-size: 30px;\n            }\n\n            ${HeaderLogoTextStyle} {\n              height: 78px;\n              padding: 15px 0;\n            }\n\n            ${HeaderNavigationStyle} {\n              flex-basis: 100%;\n              margin-left: 25px;\n              margin-right: 25px;\n              height: ${HEADER_HEIGHT_SMALL}px;\n            }\n          }\n        `\n      : shortStyle}\n\n  ${customCss}\n`\n\nexport default HeaderWrapperStyle\n","import React from 'react'\nimport HeaderTitleStyle from './HeaderTitleStyle'\n\nconst HeaderTitle: React.FC<React.AnchorHTMLAttributes<HTMLAnchorElement>> = ({\n  children,\n  ...otherProps\n}) => {\n  return <HeaderTitleStyle {...otherProps}>{children}</HeaderTitleStyle>\n}\n\nexport default HeaderTitle\n","import styled from '@datapunt/asc-core'\nimport { themeColor } from '../../../utils'\n\nexport type Props = {}\n\nexport default styled.article<Props>`\n  flex: 1;\n  background-color: ${themeColor('tint', 'level1')};\n`\ntry {\n    // @ts-ignore\n    EditorialBodyStyle.displayName = \"EditorialBodyStyle\";\n    // @ts-ignore\n    EditorialBodyStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"EditorialBodyStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLElement) => void) | RefObject<HTMLElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Editorial/EditorialBody/EditorialBodyStyle.ts#EditorialBodyStyle\"] = { docgenInfo: EditorialBodyStyle.__docgenInfo, name: \"EditorialBodyStyle\", path: \"packages/asc-ui/src/components/Editorial/EditorialBody/EditorialBodyStyle.ts#EditorialBodyStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport TypographyStyle, {\n  Props as TypographyProps,\n} from '../Typography/TypographyStyle'\nimport { themeColor, themeSpacing } from '../../utils'\n\nexport type Props = TypographyProps\n\nexport const BlockquoteStyleCSS = css`\n  margin-bottom: ${themeSpacing(5)};\n  padding: ${themeSpacing(1, 4)};\n  border-left: 2px solid ${themeColor('tint', 'level4')};\n  font-style: italic;\n\n  & p {\n    margin-bottom: 0;\n  }\n`\n\nexport default styled(TypographyStyle)<Props>`\n  ${BlockquoteStyleCSS};\n`\ntry {\n    // @ts-ignore\n    BlockquoteStyle.displayName = \"BlockquoteStyle\";\n    // @ts-ignore\n    BlockquoteStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"BlockquoteStyle\", \"props\": { \"strong\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"strong\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLParagraphElement) => void) | RefObject<HTMLParagraphElement>\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"gutterBottom\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"gutterBottom\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"styleAs\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"styleAs\", \"required\": false, \"type\": { \"name\": \"\\\"a\\\" | \\\"em\\\" | \\\"h1\\\" | \\\"h2\\\" | \\\"h3\\\" | \\\"h4\\\" | \\\"h5\\\" | \\\"h6\\\" | \\\"li\\\" | \\\"p\\\" | \\\"small\\\" | \\\"span\\\"\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": false, \"type\": { \"name\": \"\\\"em\\\"\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Blockquote/BlockquoteStyle.ts#BlockquoteStyle\"] = { docgenInfo: BlockquoteStyle.__docgenInfo, name: \"BlockquoteStyle\", path: \"packages/asc-ui/src/components/Blockquote/BlockquoteStyle.ts#BlockquoteStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\n\nexport default styled.div`\n  width: 100%;\n`\ntry {\n    // @ts-ignore\n    EditorialContentStyle.displayName = \"EditorialContentStyle\";\n    // @ts-ignore\n    EditorialContentStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"EditorialContentStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Editorial/EditorialContent/EditorialContentStyle.ts#EditorialContentStyle\"] = { docgenInfo: EditorialContentStyle.__docgenInfo, name: \"EditorialContentStyle\", path: \"packages/asc-ui/src/components/Editorial/EditorialContent/EditorialContentStyle.ts#EditorialContentStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\n\nconst CardActionsStyle = styled.div`\n  padding: 0 16px 24px;\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nexport default CardActionsStyle\n","import styled from '@datapunt/asc-core'\nimport ParagraphStyle from '../Paragraph/ParagraphStyle'\n\nconst CardContentStyle = styled.div`\n  width: 100%;\n  min-height: 90px;\n  padding: 24px 16px;\n\n  ${ParagraphStyle} {\n    margin-bottom: 0;\n  }\n`\nexport default CardContentStyle\n","import styled, { css } from '@datapunt/asc-core'\n\nexport type Props = {\n  order?: Number\n} & React.HTMLAttributes<HTMLElement>\n\nexport const ListItemStyleCSS = css`\n  word-break: break-word;\n  margin-bottom: 8px;\n`\n\nexport default styled.li<Props>`\n  ${({ order }) => order && `order: ${order};`}\n  ${ListItemStyleCSS}\n`\ntry {\n    // @ts-ignore\n    ListItemStyle.displayName = \"ListItemStyle\";\n    // @ts-ignore\n    ListItemStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ListItemStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLLIElement) => void) | RefObject<HTMLLIElement>\" } }, \"order\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"order\", \"required\": false, \"type\": { \"name\": \"Number\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/List/ListItemStyle.ts#ListItemStyle\"] = { docgenInfo: ListItemStyle.__docgenInfo, name: \"ListItemStyle\", path: \"packages/asc-ui/src/components/List/ListItemStyle.ts#ListItemStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport AmsterdamLogoStyle from '../AmsterdamLogo/AmsterdamLogoStyle'\nimport { breakpoint } from '../../utils'\n\ntype Props = {\n  tall?: boolean\n}\n\nconst HeaderLogoTextStyle = styled.h1<Props>`\n  margin: 0;\n  font-weight: 700;\n  display: flex;\n  justify-content: normal;\n  align-items: center;\n  flex-shrink: 1;\n  box-sizing: content-box;\n\n  ${AmsterdamLogoStyle} {\n    margin-right: 10px;\n  }\n\n  ${({ tall }) =>\n    tall &&\n    css`\n      @media screen and ${breakpoint('min-width', 'laptopM')} {\n        ${AmsterdamLogoStyle} {\n          margin-right: 40px;\n        }\n      }\n    `}\n`\nexport default HeaderLogoTextStyle\n","import styled from '@datapunt/asc-core'\nimport { showHide, ShowHideTypes } from '../../utils'\nimport TextFieldStyle from '../TextField/TextFieldStyle'\nimport ButtonStyle from '../Button/ButtonStyle'\n\nexport interface Props extends ShowHideTypes {}\n\nconst SearchBarStyle = styled.div<Props>`\n  display: flex;\n  position: relative;\n\n  ${TextFieldStyle} {\n    flex-grow: 1;\n  }\n\n  & > ${ButtonStyle} {\n    margin-left: 5px;\n  }\n\n  ${showHide()}\n`\n\nexport default SearchBarStyle\n","import styled from '@datapunt/asc-core'\nimport ButtonStyle from '../Button/ButtonStyle'\n\nconst TextFieldStyle = styled.div`\n  position: relative;\n\n  & > ${ButtonStyle} {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n  }\n`\n\nexport default TextFieldStyle\n","import styled, { Theme } from '@datapunt/asc-core'\nimport { CustomCssPropsType } from '../../utils'\n\nexport type Props = {\n  color?: Theme.ColorType\n  size?: number\n} & CustomCssPropsType\n\nconst SpinnerStyle = styled.div<Props>`\n  @keyframes rotating {\n    0% {\n      transform: rotate(0deg);\n    }\n\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n\n  & svg {\n    animation: rotating 1s linear infinite;\n  }\n`\n\nexport default SpinnerStyle\n","import * as React from 'react'\nimport { Spinner as SpinnerIcon } from '@datapunt/asc-assets'\n\nimport SpinnerStyle, { Props } from './SpinnerStyle'\nimport Icon from '../Icon/Icon'\n\nconst Spinner: React.FC<Props> = ({ size, color, ...otherProps }) => (\n  <SpinnerStyle size={size} {...otherProps}>\n    <Icon size={size} color={color}>\n      <SpinnerIcon />\n    </Icon>\n  </SpinnerStyle>\n)\n\nSpinner.defaultProps = {\n  size: 20,\n  color: 'default',\n}\n\nexport default Spinner\ntry {\n    // @ts-ignore\n    Spinner.displayName = \"Spinner\";\n    // @ts-ignore\n    Spinner.__docgenInfo = { \"description\": \"\", \"displayName\": \"Spinner\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Spinner/Spinner.tsx#Spinner\"] = { docgenInfo: Spinner.__docgenInfo, name: \"Spinner\", path: \"packages/asc-ui/src/components/Spinner/Spinner.tsx#Spinner\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport { perceivedLoading } from '../../utils/themeUtils'\nimport { ImageCardContentStyle } from './ImageCardContent'\n\nexport type Props = {\n  backgroundImage: string\n  isLoading?: boolean\n  animateLoading?: boolean\n}\n\nexport type WrapperProps = {\n  margin?: number\n}\n\nexport const ImageCardWrapperStyle = styled.div<WrapperProps>`\n  ${({ margin }) =>\n    margin &&\n    css`\n      margin: ${margin}px;\n    `}\n`\n\nexport default styled.div<Props>`\n  padding-top: 100%;\n  background-size: cover;\n  background-repeat: no-repeat;\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  ${({ isLoading, theme, animateLoading, backgroundImage }) =>\n    isLoading\n      ? css`\n          ${perceivedLoading(theme, animateLoading)}\n          ${ImageCardContentStyle} {\n            height: 100px;\n            width: 100%;\n\n            & > * {\n              display: none;\n            }\n\n            &::before {\n              content: '';\n              display: block;\n              width: calc(100% - 30px);\n              height: 30px;\n              ${perceivedLoading(theme, animateLoading)}\n            }\n          }\n        `\n      : css`\n          background-image: url(${backgroundImage});\n        `}\n\n  &::before {\n    content: '';\n    width: 0;\n    height: 0;\n    border-width: 22px;\n    border-color: transparent;\n    position: absolute;\n    border-style: solid;\n    right: 0;\n    bottom: 0;\n    border-bottom-color: white;\n    border-right-color: white;\n  }\n`\ntry {\n    // @ts-ignore\n    ImageCardWrapperStyle.displayName = \"ImageCardWrapperStyle\";\n    // @ts-ignore\n    ImageCardWrapperStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ImageCardWrapperStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"margin\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"margin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/ImageCard/ImageCardStyle.ts#ImageCardWrapperStyle\"] = { docgenInfo: ImageCardWrapperStyle.__docgenInfo, name: \"ImageCardWrapperStyle\", path: \"packages/asc-ui/src/components/ImageCard/ImageCardStyle.ts#ImageCardWrapperStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ImageCardStyle.displayName = \"ImageCardStyle\";\n    // @ts-ignore\n    ImageCardStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ImageCardStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"backgroundImage\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"backgroundImage\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"isLoading\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isLoading\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"animateLoading\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"animateLoading\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/ImageCard/ImageCardStyle.ts#ImageCardStyle\"] = { docgenInfo: ImageCardStyle.__docgenInfo, name: \"ImageCardStyle\", path: \"packages/asc-ui/src/components/ImageCard/ImageCardStyle.ts#ImageCardStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { themeColor, themeSpacing } from '../../utils'\nimport LabelStyle from '../Label/LabelStyle'\nimport ButtonStyle from '../Button/ButtonStyle'\n\nexport type Props = {}\n\nexport default styled.div<Props>`\n  border: 2px solid ${themeColor('tint', 'level3')};\n  padding: 0 ${themeSpacing(5)} ${themeSpacing(5)};\n\n  ${LabelStyle} {\n    padding: ${themeSpacing(1)} 0;\n  }\n\n  ${ButtonStyle} {\n    margin-top: ${themeSpacing(5)};\n  }\n`\n\nexport const FilterBoxHeader = styled.div`\n  margin-bottom: ${themeSpacing(5)};\n  padding: ${themeSpacing(4)} 0;\n  min-height: 88px;\n  border-bottom: 2px solid ${themeColor('tint', 'level3')};\n`\ntry {\n    // @ts-ignore\n    FilterBoxStyle.displayName = \"FilterBoxStyle\";\n    // @ts-ignore\n    FilterBoxStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"FilterBoxStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/FilterBox/FilterBoxStyle.ts#FilterBoxStyle\"] = { docgenInfo: FilterBoxStyle.__docgenInfo, name: \"FilterBoxStyle\", path: \"packages/asc-ui/src/components/FilterBox/FilterBoxStyle.ts#FilterBoxStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    FilterBoxHeader.displayName = \"FilterBoxHeader\";\n    // @ts-ignore\n    FilterBoxHeader.__docgenInfo = { \"description\": \"\", \"displayName\": \"FilterBoxHeader\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/FilterBox/FilterBoxStyle.ts#FilterBoxHeader\"] = { docgenInfo: FilterBoxHeader.__docgenInfo, name: \"FilterBoxHeader\", path: \"packages/asc-ui/src/components/FilterBox/FilterBoxStyle.ts#FilterBoxHeader\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react'\nimport styled from '@datapunt/asc-core'\nimport { Enlarge } from '@datapunt/asc-assets'\nimport FilterBoxStyle, {\n  FilterBoxHeader,\n  Props as StyleProps,\n} from './FilterBoxStyle'\nimport Heading from '../Heading'\nimport Paragraph from '../Paragraph'\nimport Button from '../Button'\n\ntype Props = {\n  label: string\n  subLabel?: string\n  showMoreLabel?: string\n} & StyleProps\n\nconst StyledHeading = styled(Heading)`\n  margin-bottom: 0;\n`\nconst StyledParagraph = styled(Paragraph)`\n  margin-bottom: 0;\n`\n\nconst FilterBox: React.FC<Props & React.HTMLAttributes<HTMLElement>> = ({\n  children,\n  label,\n  subLabel,\n  showMoreLabel,\n  ...otherProps\n}) => (\n  <FilterBoxStyle {...otherProps}>\n    <FilterBoxHeader>\n      <StyledHeading $as=\"h3\" color=\"primary\">\n        {label}\n      </StyledHeading>\n      {subLabel && <StyledParagraph>{subLabel}</StyledParagraph>}\n    </FilterBoxHeader>\n    {children}\n    {showMoreLabel && (\n      <Button variant=\"application\" iconLeft={<Enlarge />} iconSize={10}>\n        {showMoreLabel}\n      </Button>\n    )}\n  </FilterBoxStyle>\n)\n\nexport default FilterBox\n","import styled, { css } from '@datapunt/asc-core'\nimport { themeColor, srOnlyStyle } from '../../utils'\nimport { CheckboxWrapperStyle } from '../Checkbox'\n\ntype SharedProps = {\n  position?: 'top' | 'right' | 'bottom' | 'left'\n}\n\nexport type Props = {\n  srOnly?: boolean\n  disabled?: boolean\n  align?: 'center' | 'flex-start' | 'flex-end'\n} & SharedProps\n\ntype StyleOnlyProps = {\n  active: boolean\n}\n\nconst LabelStyle = styled.label<Props & StyleOnlyProps>`\n  display: inline-flex;\n  align-items: ${({ align }) => align};\n  vertical-align: middle;\n  color: ${themeColor('tint', 'level7')};\n  ${srOnlyStyle()}\n  ${({ disabled }) =>\n    disabled\n      ? css`\n          opacity: 0.3;\n        `\n      : css`\n          cursor: pointer;\n        `}\n  ${({ position }) =>\n    (position === 'top' || position === 'bottom') &&\n    css`\n      flex-direction: column;\n    `}\n  ${({ position }) =>\n    position &&\n    css`\n      & ${CheckboxWrapperStyle} {\n        padding-${position}: 12px;\n      }\n    `}\n  \n  ${({ active }) =>\n    active &&\n    css`\n      font-weight: 700;\n    `}\n`\n\nLabelStyle.defaultProps = {\n  position: 'right',\n  align: 'center',\n} as SharedProps\n\nexport const LabelTextStyle = styled.span<SharedProps>`\n  ${({ position }) =>\n    position !== 'top' &&\n    position !== 'bottom' &&\n    css`\n      margin: 9.2px 0; /* To align the label to a checkbox / radiobutton when having a long text. line-height is 1.15 / 18.4px (from normalize css). Margin top & bottom = lineheight / 2 */\n    `}\n  ${({ position }) =>\n    position === 'top' || position === 'left'\n      ? css`\n          order: 0;\n        `\n      : css`\n          order: 1;\n        `}\n`\n\nexport default LabelStyle\ntry {\n    // @ts-ignore\n    LabelTextStyle.displayName = \"LabelTextStyle\";\n    // @ts-ignore\n    LabelTextStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"LabelTextStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLSpanElement) => void) | RefObject<HTMLSpanElement>\" } }, \"position\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"position\", \"required\": false, \"type\": { \"name\": \"\\\"left\\\" | \\\"right\\\" | \\\"top\\\" | \\\"bottom\\\"\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Label/LabelStyle.ts#LabelTextStyle\"] = { docgenInfo: LabelTextStyle.__docgenInfo, name: \"LabelTextStyle\", path: \"packages/asc-ui/src/components/Label/LabelStyle.ts#LabelTextStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css, styledComponents, Theme } from '@datapunt/asc-core'\nimport { readableColor } from 'polished'\nimport { Props as TypographyProps } from '../Typography/TypographyStyle'\nimport Typography from '../Typography'\nimport { themeColor } from '../../utils'\n\nexport type Props = {\n  colorType?: keyof Theme.ColorType\n  colorSubtype?: keyof Theme.Tint\n} & TypographyProps &\n  styledComponents.StyledProps<any>\n\nexport const TagStyleCSS = ({ colorType, colorSubtype, theme }: Props) => {\n  const backgroundColor = themeColor(colorType, colorSubtype)({ theme })\n  return css<Props>`\n    margin-top: 0;\n    display: block;\n    padding: 4px;\n    background: blue;\n    width: fit-content;\n    background-color: ${backgroundColor};\n    color: ${readableColor(backgroundColor)};\n  `\n}\n\nexport default styled(Typography)<Props>`\n  ${TagStyleCSS}\n`\ntry {\n    // @ts-ignore\n    TagStyleCSS.displayName = \"TagStyleCSS\";\n    // @ts-ignore\n    TagStyleCSS.__docgenInfo = { \"description\": \"\", \"displayName\": \"TagStyleCSS\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Tag/TagStyle.ts#TagStyleCSS\"] = { docgenInfo: TagStyleCSS.__docgenInfo, name: \"TagStyleCSS\", path: \"packages/asc-ui/src/components/Tag/TagStyle.ts#TagStyleCSS\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    TagStyle.displayName = \"TagStyle\";\n    // @ts-ignore\n    TagStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"TagStyle\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Tag/TagStyle.ts#TagStyle\"] = { docgenInfo: TagStyle.__docgenInfo, name: \"TagStyle\", path: \"packages/asc-ui/src/components/Tag/TagStyle.ts#TagStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css, styledComponents } from '@datapunt/asc-core'\nimport { Props as TypographyProps } from '../Typography/TypographyStyle'\nimport Typography from '../Typography'\nimport { themeColor, themeSpacing } from '../../utils'\nimport IconStyle from '../Icon/IconStyle'\n\nexport type Props = {} & TypographyProps & styledComponents.StyledProps<any>\n\nexport const FilterTagStyleCSS = () => {\n  return css<Props>`\n    margin: 0 ${themeSpacing(2)} ${themeSpacing(2)} 0;\n    padding: 0 ${themeSpacing(2)};\n    line-height: 30px;\n    display: inline-block;\n    width: fit-content;\n    background-color: ${themeColor('tint', 'level1')};\n    color: ${themeColor('tint', 'level7')};\n    border: solid 1px ${themeColor('tint', 'level3')};\n    font-size: 16px;\n    font-weight: 500;\n\n    &:hover {\n      background-color: ${themeColor('tint', 'level3')};\n      cursor: pointer;\n    }\n\n    ${IconStyle} {\n      margin: 0 0 0 ${themeSpacing(2)};\n      vertical-align: middle;\n    }\n  `\n}\n\nexport default styled(Typography)<Props>`\n  ${FilterTagStyleCSS}\n`\ntry {\n    // @ts-ignore\n    FilterTagStyle.displayName = \"FilterTagStyle\";\n    // @ts-ignore\n    FilterTagStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"FilterTagStyle\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/FilterTag/FilterTagStyle.ts#FilterTagStyle\"] = { docgenInfo: FilterTagStyle.__docgenInfo, name: \"FilterTagStyle\", path: \"packages/asc-ui/src/components/FilterTag/FilterTagStyle.ts#FilterTagStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { themeColor } from '../../../utils'\nimport ButtonStyle, { Props as ButtonProps } from '../ButtonStyle'\n\nexport type Props = {\n  open?: boolean\n  size?: number\n} & ButtonProps\n\nexport default styled(ButtonStyle)<Props>`\n  background-color: ${({ open, theme }) =>\n    themeColor('tint', open ? 'level2' : 'level1')({ theme })};\n\n  &:hover,\n  &:focus {\n    background-color: ${({ theme, open }) =>\n      themeColor('tint', open ? 'level2' : 'level2')({ theme })};\n  }\n`\ntry {\n    // @ts-ignore\n    ToggleButtonStyle.displayName = \"ToggleButtonStyle\";\n    // @ts-ignore\n    ToggleButtonStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ToggleButtonStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLButtonElement) => void) | RefObject<HTMLButtonElement>\" } }, \"variant\": { \"defaultValue\": null, \"description\": \"A variant, usually different background-color and color of a button\", \"name\": \"variant\", \"required\": false, \"type\": { \"name\": \"\\\"primary\\\" | \\\"secondary\\\" | \\\"tertiary\\\" | \\\"primaryInverted\\\" | \\\"textButton\\\" | \\\"blank\\\" | \\\"application\\\"\" } }, \"square\": { \"defaultValue\": null, \"description\": \"Deprecated: use size to create a button with equal width and height\\n@deprecated\", \"name\": \"square\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"open\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"open\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"size\": { \"defaultValue\": null, \"description\": \"Set an equal height and width\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"taskflow\": { \"defaultValue\": null, \"description\": \"Add narrow arrow on the right side of the secondary button\", \"name\": \"taskflow\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Button/ToggleButton/ToggleButtonStyle.ts#ToggleButtonStyle\"] = { docgenInfo: ToggleButtonStyle.__docgenInfo, name: \"ToggleButtonStyle\", path: \"packages/asc-ui/src/components/Button/ToggleButton/ToggleButtonStyle.ts#ToggleButtonStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { themeColor, themeSpacing } from '../../utils'\n\nconst DocumentCoverStyle = styled.div<{}>`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  margin-bottom: ${themeSpacing(5)};\n  background-color: ${themeColor('tint', 'level2')};\n`\n\nexport default DocumentCoverStyle\n","import styled from '@datapunt/asc-core'\nimport { breakpoint, themeSpacing } from '../../../utils'\nimport ImageStyle from '../../Image/ImageStyle'\n\nexport default styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: ${themeSpacing(8, 0)};\n\n  @media screen and ${breakpoint('max-width', 'tabletS')} {\n    margin: ${themeSpacing(5)};\n  }\n\n  & > ${ImageStyle} {\n    max-width: 300px;\n    margin-bottom: ${themeSpacing(8)};\n    width: 100%;\n\n    @media screen and ${breakpoint('max-width', 'tabletS')} {\n      max-width: 200px;\n      margin-bottom: ${themeSpacing(5)};\n    }\n  }\n`\ntry {\n    // @ts-ignore\n    DocumentCoverContentStyle.displayName = \"DocumentCoverContentStyle\";\n    // @ts-ignore\n    DocumentCoverContentStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"DocumentCoverContentStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/DocumentCover/DocumentCoverContent/DocumentCoverContentStyle.ts#DocumentCoverContentStyle\"] = { docgenInfo: DocumentCoverContentStyle.__docgenInfo, name: \"DocumentCoverContentStyle\", path: \"packages/asc-ui/src/components/DocumentCover/DocumentCoverContent/DocumentCoverContentStyle.ts#DocumentCoverContentStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react'\nimport styled from '@datapunt/asc-core'\nimport { Download } from '@datapunt/asc-assets'\nimport DocumentCoverStyle from './DocumentCoverStyle'\nimport Button from '../Button'\nimport Image from '../Image'\nimport DocumentCoverContent from './DocumentCoverContent'\n\ninterface Props {\n  imageSrc: string\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void\n  description: string\n}\n\nconst ButtonStyled = styled(Button)`\n  display: flex;\n  justify-content: center;\n`\n\nconst DocumentCoverContentStyle: React.FC<Props> = ({\n  imageSrc,\n  onClick,\n  description,\n  ...otherProps\n}) => (\n  <DocumentCoverStyle {...otherProps}>\n    <DocumentCoverContent>\n      <Image src={imageSrc} alt=\"\" />\n      <ButtonStyled variant=\"primary\" onClick={onClick} iconLeft={<Download />}>\n        {description}\n      </ButtonStyled>\n    </DocumentCoverContent>\n  </DocumentCoverStyle>\n)\n\nexport default DocumentCoverContentStyle\n","import { position, transparentize } from 'polished'\nimport styled from '@datapunt/asc-core'\nimport { BACKDROP_Z_INDEX } from '../shared/constants'\n\nimport { themeColor } from '../../utils'\n\nexport type Props = {\n  backdropOpacity?: number\n}\n\nconst BackDropStyle = styled.div<Props>`\n  display: block;\n  ${position('fixed', 0, 0, 0, 0)};\n  background-color: ${({ backdropOpacity, theme }) =>\n    transparentize(\n      backdropOpacity || 0.3,\n      themeColor('tint', 'level7')({ theme }),\n    )};\n  z-index: ${BACKDROP_Z_INDEX};\n`\n\nexport default BackDropStyle\n","import styled from '@datapunt/asc-core'\nimport { themeColor, focusStyleOutline } from '../../utils'\n\nconst InputStyle = styled.input.attrs({\n  type: 'text',\n  autoCapitalize: 'off',\n  autoComplete: 'off',\n  autoCorrect: 'off',\n  spellCheck: false,\n})`\n  appearance: none;\n  font-size: 1rem;\n  border: solid 1px ${themeColor('tint', 'level5')};\n  border-radius: 0;\n  box-sizing: border-box;\n  line-height: 18px;\n  padding: 10px;\n  width: 100%;\n  ${focusStyleOutline(2, 0.5)}\n\n  &:hover {\n    border-color: ${themeColor('tint', 'level6')};\n  }\n`\n\nexport default InputStyle\n","import styled, { css } from '@datapunt/asc-core'\nimport { clearFix } from 'polished'\n\nexport type Props = {\n  source: string\n  position?: string\n  aspectRatio?: number\n  repeat?: string\n  size?: string\n}\n\nexport default styled.div<Props>`\n  width: 100%;\n  background-image: url(${({ source }) => source});\n  background-repeat: ${({ repeat }) => repeat};\n  background-position: ${({ position }) => position};\n  background-size: ${({ size }) => size};\n  ${({ aspectRatio }) =>\n    aspectRatio &&\n    css`\n      &::before {\n        content: '';\n        width: 1px;\n        margin-left: -1px;\n        float: left;\n        height: 0;\n        padding-top: ${aspectRatio}%;\n      }\n    `}\n\n  ${clearFix()}\n`\ntry {\n    // @ts-ignore\n    BackgroundImageStyle.displayName = \"BackgroundImageStyle\";\n    // @ts-ignore\n    BackgroundImageStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"BackgroundImageStyle\", \"props\": { \"source\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"source\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"repeat\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"repeat\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"position\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"position\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aspectRatio\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"aspectRatio\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/BackgroundImage/BackgroundImageStyle.ts#BackgroundImageStyle\"] = { docgenInfo: BackgroundImageStyle.__docgenInfo, name: \"BackgroundImageStyle\", path: \"packages/asc-ui/src/components/BackgroundImage/BackgroundImageStyle.ts#BackgroundImageStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport { getTypographyFromTheme, themeSpacing } from '../../utils/themeUtils'\n\nexport const OrderedListStyleCSS = css`\n  margin: ${themeSpacing(0, 0, 6, 6)};\n  padding: 0;\n  counter-reset: item;\n\n  li {\n    /* Unfortunately we target the element instead of the style. This because we have to target the LI if it's rendered in CustomHTMLBlock */\n    position: relative;\n    ${({ theme }) => getTypographyFromTheme()({ as: 'li', theme })};\n    list-style-type: none;\n    counter-increment: item;\n\n    &::before {\n      display: inline-block;\n      width: 1em;\n      position: absolute;\n      left: -${themeSpacing(6)};\n      top: 0;\n      padding-right: 0.5em;\n      font-weight: bold;\n      text-align: right;\n      content: counter(item) '.';\n    }\n  }\n`\n\nexport default styled.ol`\n  ${OrderedListStyleCSS}\n`\ntry {\n    // @ts-ignore\n    OrderedListStyle.displayName = \"OrderedListStyle\";\n    // @ts-ignore\n    OrderedListStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"OrderedListStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLOListElement) => void) | RefObject<HTMLOListElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/List/OrderedListStyle.ts#OrderedListStyle\"] = { docgenInfo: OrderedListStyle.__docgenInfo, name: \"OrderedListStyle\", path: \"packages/asc-ui/src/components/List/OrderedListStyle.ts#OrderedListStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\n\nexport type Props = {\n  square?: boolean\n}\n\nexport default styled.img<Props>`\n  width: 100%;\n\n  ${({ square }) =>\n    square &&\n    css`\n      height: 100%;\n      // Polyfill for IE11 from 'objectFitPolyfill'\n      object-fit: cover;\n    `}\n`\ntry {\n    // @ts-ignore\n    ImageStyle.displayName = \"ImageStyle\";\n    // @ts-ignore\n    ImageStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ImageStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLImageElement) => void) | RefObject<HTMLImageElement>\" } }, \"square\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"square\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Image/ImageStyle.ts#ImageStyle\"] = { docgenInfo: ImageStyle.__docgenInfo, name: \"ImageStyle\", path: \"packages/asc-ui/src/components/Image/ImageStyle.ts#ImageStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react'\nimport styled, { Theme, css } from '@datapunt/asc-core'\nimport {\n  mediaQuery,\n  colCount,\n  spanWidth,\n  pushWidth,\n  margin,\n} from '../../utils/grid'\nimport { TypeFlexPosition } from '.'\n\nexport type TypeProps = {\n  alignSelf?: TypeFlexPosition\n  children: React.ReactNode\n  className?: string\n  debug?: boolean\n  debugColor?: string\n  id?: string\n  order?: Theme.TypeSpan\n  parentSpan?: Theme.TypeSpan\n  push?: Theme.TypeSpan\n  span: Theme.TypeSpan\n  wrap?: boolean\n}\n\nconst ColumnStyle = styled(({ className, children, id, ...rest }) => {\n  const dataProps = {}\n  Object.keys(rest)\n    .filter(key => key.startsWith('data-') || key.startsWith('aria-'))\n    .forEach(key => {\n      dataProps[key] = rest[key]\n    })\n\n  return (\n    <div className={className} id={id} {...dataProps}>\n      {children}\n    </div>\n  )\n})`\n  box-sizing: border-box;\n  width: 100%;\n  display: flex;\n  align-self: ${({ alignSelf }: { alignSelf?: string }) => alignSelf};\n  justify-content: space-between;\n\n  ${({ wrap }: { wrap?: boolean }) =>\n    wrap &&\n    css`\n      flex-wrap: wrap;\n    `}\n  ${({ order }: { order?: number }) =>\n    order && typeof order !== 'number'\n      ? Object.keys(order).map(\n          layoutId => css`\n            @media ${mediaQuery(layoutId)} {\n              order: ${order[layoutId]};\n            }\n          `,\n        )\n      : css`\n          order: ${order};\n        `}\n  ${({\n    debug,\n    span,\n    parentSpan,\n    push = 0,\n    theme,\n  }: {\n    debug?: boolean\n    parentSpan?: Theme.TypeSpan\n    span: Theme.TypeSpan\n    push?: Theme.TypeSpan\n    theme: Theme.ThemeInterface\n  }) =>\n    Object.keys(theme.layouts).map(layoutId => {\n      const spanCount = colCount(span, layoutId)\n      const pushCount = colCount(push, layoutId)\n\n      if (spanCount < 1 || pushCount < 0) {\n        return null\n      }\n\n      return css`\n        @media ${mediaQuery(layoutId)} {\n          ${debug &&\n            css`\n              &::before {\n                content: 'span ${spanCount}';\n              }\n            `}\n          ${pushCount > 0 &&\n            margin(layoutId)({ theme }) > 0 &&\n            css`\n              margin-left: ${pushWidth({ layoutId, push, parentSpan })};\n            `}\n          max-width: ${spanWidth({ layoutId, span, parentSpan })};\n        }\n      `\n    })};\n  ${({ debug, debugColor }: { debug?: boolean; debugColor?: string }) =>\n    debug &&\n    css`\n      position: relative;\n      border: 1px solid;\n      border-color: ${debugColor};\n\n      &::before {\n        background: white;\n        position: absolute;\n        top: -12px;\n        left: 4px;\n        padding: 2px 4px;\n        border: 1px solid ${debugColor};\n        font: 12px sans-serif;\n      }\n    `}\n`\n\nColumnStyle.defaultProps = {\n  order: 0,\n}\n\nexport default ColumnStyle\n","import styled, { css, Theme } from '@datapunt/asc-core'\nimport { getValueFromTheme, valueFromObject } from '../../utils'\nimport {\n  mediaQuery,\n  min,\n  max,\n  margin,\n  columns,\n  spacerWidth,\n  gutter,\n} from '../../utils/grid'\nimport { TypeFlexPosition } from '.'\n\ntype FlexJustify =\n  | 'flex-start'\n  | 'flex-end'\n  | 'center'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n\nexport type TypeProps = {\n  children: React.ReactNode\n  className?: string\n  debug?: boolean\n  debugColor?: string\n  halign?: FlexJustify\n  hasMargin?: boolean\n  hasMaxWidth?: boolean\n  valign?: TypeFlexPosition\n}\n\nconst RowStyle = styled.div<TypeProps>`\n  box-sizing: border-box;\n  margin: 0 auto;\n  display: flex;\n  justify-content: ${({ halign }: { halign?: string }) => halign};\n  align-items: ${({ valign }: { valign?: string }) => valign};\n  max-width: ${({ hasMaxWidth, theme }) =>\n    hasMaxWidth ? `${getValueFromTheme('maxGridWidth')({ theme })}px` : '100%'};\n  flex-wrap: wrap;\n\n  .layout-label {\n    position: absolute;\n    top: -20px;\n    width: 100%;\n  }\n\n  .layout-label::before {\n    position: absolute;\n    padding: 2px 4px;\n    font: 12px sans-serif;\n    background: white;\n    height: 20px;\n  }\n\n  ${({ debug }: { debug?: boolean }) =>\n    debug &&\n    css`\n      position: relative;\n    `};\n  ${({\n    debug,\n    debugColor,\n    hasMargin,\n    theme,\n  }: {\n    debug?: boolean\n    debugColor?: string\n    hasMargin?: boolean\n    theme: Theme.ThemeInterface\n  }) =>\n    Object.keys(theme.layouts).map(\n      layoutId => css`\n    @media ${mediaQuery(layoutId)} {\n      ${debug &&\n        css`\n        .layout-label::before {\n          content: '${layoutId} (${min(layoutId)({ theme }) || 0} - ${max(\n          layoutId,\n        )({ theme }) || '∞'})';\n        }\n\n        background-image: repeating-linear-gradient(\n          to right,\n          ${debugColor},\n          ${debugColor} calc((100% - ${spacerWidth(\n          layoutId,\n          true,\n        )}) / ${columns(layoutId)}),\n          transparent calc((100% - ${spacerWidth(layoutId, true)}) / ${columns(\n          layoutId,\n        )}),\n          transparent calc(((100% - ${spacerWidth(layoutId, true)}) / ${columns(\n          layoutId,\n        )}) + ${gutter(layoutId, true)})\n        );\n        background-clip: content-box;\n      `};\n\n      ${valueFromObject(`layouts.${layoutId}.margin`, theme) > 0 &&\n        hasMargin &&\n        css`\n          padding-left: ${margin(layoutId, true)};\n          padding-right: ${margin(layoutId, true)};\n        `}\n\n      ${debug &&\n        valueFromObject(`layouts.${layoutId}.margin`, theme) > 0 &&\n        css`\n          background-position: ${margin(layoutId)}px;\n        `}\n\n      ${debug &&\n        valueFromObject(`layouts.${layoutId}.margin`, theme) > 0 &&\n        hasMargin &&\n        css`\n        &::before, &::after {\n          box-sizing: border-box;\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          height: 100%;\n          width: ${margin(layoutId, true)};\n          content: '${margin(layoutId)}';\n          font: 10px sans-serif;\n          z-index: 1;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        &::before {\n          left: 0;\n          border-right: 1px solid white;\n        }\n        &::after {\n          right: 0;\n          border-left: 1px solid white;\n        }\n      `}\n    }`,\n    )}\n`\n\nRowStyle.defaultProps = {\n  halign: 'space-between',\n  hasMaxWidth: true,\n  valign: 'stretch',\n}\n\nexport default RowStyle\n","import styled from '@datapunt/asc-core'\nimport ListStyle from '../../List/ListStyle'\nimport HeadingStyle from '../../Heading/HeadingStyle'\nimport TypographyStyle from '../../Typography/TypographyStyle'\nimport LinkStyle from '../../Link/LinkStyle'\nimport { themeColor } from '../../../utils'\n\nexport default styled.aside`\n  width: 100%;\n\n  ${ListStyle} {\n    margin: 16px 0;\n  }\n\n  & > ${HeadingStyle} {\n    /** matching the line-height of the article's heading **/\n    min-height: 38px;\n  }\n\n  ${LinkStyle} {\n    & > ${TypographyStyle} {\n      display: block;\n      color: ${themeColor('tint', 'level6')};\n      text-decoration: none;\n    }\n  }\n\n  ${/* sc-selector */ LinkStyle}:hover {\n    text-decoration: none;\n  }\n`\ntry {\n    // @ts-ignore\n    EditorialSidebarStyle.displayName = \"EditorialSidebarStyle\";\n    // @ts-ignore\n    EditorialSidebarStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"EditorialSidebarStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLElement) => void) | RefObject<HTMLElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Editorial/EditorialSidebar/EditorialSidebarStyle.ts#EditorialSidebarStyle\"] = { docgenInfo: EditorialSidebarStyle.__docgenInfo, name: \"EditorialSidebarStyle\", path: \"packages/asc-ui/src/components/Editorial/EditorialSidebar/EditorialSidebarStyle.ts#EditorialSidebarStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { breakpoint } from '../../utils'\n\nconst HeaderLinksStyle = styled.div`\n  display: flex;\n  position: absolute;\n  top: 17px;\n  right: 45px;\n  align-items: center;\n  justify-content: flex-end;\n\n  @media screen and ${breakpoint('max-width', 'laptopM')} {\n    display: none;\n  }\n`\n\nexport default HeaderLinksStyle\n","import styled from '@datapunt/asc-core'\nimport { showHide, ShowHideTypes, CustomCssPropsType } from '../../utils'\n\nexport type Props = {\n  align?: 'left' | 'right'\n  hasBackDrop?: boolean\n} & ShowHideTypes &\n  CustomCssPropsType\n\nexport default styled.div<Props>`\n  display: flex;\n  flex-direction: column;\n  align-items: ${({ align }) => (align === 'left' ? 'flex-start' : `flex-end`)};\n  ${showHide()};\n`\ntry {\n    // @ts-ignore\n    ToggleStyle.displayName = \"ToggleStyle\";\n    // @ts-ignore\n    ToggleStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ToggleStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"align\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"align\", \"required\": false, \"type\": { \"name\": \"\\\"left\\\" | \\\"right\\\"\" } }, \"hasBackDrop\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"hasBackDrop\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"hideAt\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"hideAt\", \"required\": false, \"type\": { \"name\": \"\\\"mobileS\\\" | \\\"mobileM\\\" | \\\"mobileL\\\" | \\\"tabletS\\\" | \\\"tabletM\\\" | \\\"laptop\\\" | \\\"laptopM\\\" | \\\"laptopL\\\" | \\\"desktop\\\" | \\\"desktopL\\\"\" } }, \"showAt\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"showAt\", \"required\": false, \"type\": { \"name\": \"\\\"mobileS\\\" | \\\"mobileM\\\" | \\\"mobileL\\\" | \\\"tabletS\\\" | \\\"tabletM\\\" | \\\"laptop\\\" | \\\"laptopM\\\" | \\\"laptopL\\\" | \\\"desktop\\\" | \\\"desktopL\\\"\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Toggle/ToggleStyle.ts#ToggleStyle\"] = { docgenInfo: ToggleStyle.__docgenInfo, name: \"ToggleStyle\", path: \"packages/asc-ui/src/components/Toggle/ToggleStyle.ts#ToggleStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport {\n  themeColor,\n  showHide,\n  ShowHideTypes,\n  showAboveBackDrop,\n} from '../../utils'\nimport SearchBarStyle from '../SearchBar/SearchBarStyle'\nimport ToggleStyle from '../Toggle/ToggleStyle'\nimport { TOGGLE_BUTTON_SIZE } from '../shared/constants'\nimport ToggleButtonStyle from '../Button/ToggleButton'\n\nexport interface SearchBarToggleStyleProps extends ShowHideTypes {\n  open?: boolean\n}\n\nconst SearchBarToggleStyle = styled(ToggleStyle)<SearchBarToggleStyleProps>`\n  display: flex;\n  align-items: flex-end;\n  flex-direction: column;\n\n  & > ${ToggleButtonStyle} {\n    ${showAboveBackDrop()}\n  }\n\n  & > ${SearchBarStyle} {\n    position: absolute;\n    top: ${TOGGLE_BUTTON_SIZE}px;\n    right: 0;\n    left: 0;\n    padding: 15px;\n    background-color: ${themeColor('tint', 'level2')};\n    border-bottom: 4px solid;\n    ${showAboveBackDrop()}\n  }\n\n  ${showHide()}\n`\n\nexport default SearchBarToggleStyle\n","import styled from '@datapunt/asc-core'\nimport TopBarStyle from '../TopBar/TopBarStyle'\nimport { themeColor, showAboveBackDrop } from '../../utils'\n\ntype Props = {\n  attributes?: object\n  hasBackDrop?: boolean\n}\n\nconst ModalStyle = styled.div<Props>`\n  background-color: ${themeColor('tint', 'level1')};\n  overflow: auto;\n  width: 100%;\n  max-width: 620px;\n  max-height: 75%;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  ${TopBarStyle} {\n    min-height: 54px;\n  }\n\n  ${showAboveBackDrop()}\n`\n\nexport const ModalStyleContainer = styled.div`\n  display: grid;\n  height: 100vh;\n  margin: 0;\n  place-items: center center;\n`\n\nexport default ModalStyle\ntry {\n    // @ts-ignore\n    ModalStyleContainer.displayName = \"ModalStyleContainer\";\n    // @ts-ignore\n    ModalStyleContainer.__docgenInfo = { \"description\": \"\", \"displayName\": \"ModalStyleContainer\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Modal/ModalStyle.ts#ModalStyleContainer\"] = { docgenInfo: ModalStyleContainer.__docgenInfo, name: \"ModalStyleContainer\", path: \"packages/asc-ui/src/components/Modal/ModalStyle.ts#ModalStyleContainer\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport { stripUnit } from 'polished'\nimport { breakpoint } from '../../../utils'\nimport EditorialBodyStyle from '../EditorialBody/EditorialBodyStyle'\nimport { EDITORIAL_PADDING_TOP } from '../EditorialPost/EditorialPostStyle'\nimport { getTypographyValueFromProperty } from '../../../utils/themeUtils'\nimport {\n  EDITORIAL_META_LINE_HEIGHT,\n  EDITORIAL_META_MARGIN_TOP,\n} from '../EditorialMetaList/EditorialMetaListStyle'\nimport EditorialPost, {\n  Props as EditorialPostProps,\n} from '../EditorialPost/EditorialPost'\n\nexport type Props = {} & EditorialPostProps\n\nexport default styled(EditorialPost)<Props>` \n  ${EditorialBodyStyle} {\n    ${({ image }) =>\n      !!image &&\n      css`\n        @media screen and ${breakpoint('min-width', 'tabletM')} {\n          padding: ${EDITORIAL_PADDING_TOP}px 24px;\n        }\n      `}\n    \n    /* \n    Here we calculate how much the EditorialBody needs to shift up by getting existing css values from:\n    - The H1 line-height\n    - the padding of the EditorialBody\n    - the EditorialMeta margin-top and line-height\n    */\n    @media screen and ${breakpoint('min-width', 'tabletM')} {\n      margin-top: ${({ image, theme }) =>\n        image\n          ? `${(EDITORIAL_PADDING_TOP * 2 +\n              EDITORIAL_META_LINE_HEIGHT +\n              EDITORIAL_META_MARGIN_TOP +\n              stripUnit(\n                getTypographyValueFromProperty('h1', 'lineHeight', 'tabletS')({\n                  theme,\n                }),\n              )) *\n              -1}px`\n          : `0`};\n    }\n  }\n`\ntry {\n    // @ts-ignore\n    ArticleStyle.displayName = \"ArticleStyle\";\n    // @ts-ignore\n    ArticleStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ArticleStyle\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Editorial/Article/ArticleStyle.ts#ArticleStyle\"] = { docgenInfo: ArticleStyle.__docgenInfo, name: \"ArticleStyle\", path: \"packages/asc-ui/src/components/Editorial/Article/ArticleStyle.ts#ArticleStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { themeColor, focusStyleOutline } from '../../utils'\n\nconst ContextMenuButtonStyle = styled.button`\n  ${focusStyleOutline()}\n  display: flex;\n  background-color: ${themeColor('tint', 'level1')};\n  align-items: center;\n  height: 32px;\n  padding: 0 6px;\n  justify-content: space-between;\n\n  & > span:not(:last-child) {\n    margin-right: 6px;\n  }\n`\n\nexport default ContextMenuButtonStyle\n","import React from 'react'\nimport Icon from '../Icon'\nimport ContextMenuButtonStyle from './ContextMenuButtonStyle'\n\nconst ContextMenuButton = ({\n  id,\n  label,\n  position,\n  icon,\n  arrowIcon,\n  open,\n  ...otherProps\n}: any) => {\n  return (\n    <ContextMenuButtonStyle {...{ id }} {...otherProps}>\n      {icon && icon}\n      {label && <span>{label}</span>}\n      <Icon\n        inline\n        size={24}\n        padding={4}\n        rotate={\n          (position === 'bottom' && !open) || (position !== 'bottom' && open)\n            ? 180\n            : 0\n        }\n      >\n        {arrowIcon}\n      </Icon>\n    </ContextMenuButtonStyle>\n  )\n}\n\nexport default ContextMenuButton\ntry {\n    // @ts-ignore\n    ContextMenuButton.displayName = \"ContextMenuButton\";\n    // @ts-ignore\n    ContextMenuButton.__docgenInfo = { \"description\": \"\", \"displayName\": \"ContextMenuButton\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/ContextMenu/ContextMenuButton.tsx#ContextMenuButton\"] = { docgenInfo: ContextMenuButton.__docgenInfo, name: \"ContextMenuButton\", path: \"packages/asc-ui/src/components/ContextMenu/ContextMenuButton.tsx#ContextMenuButton\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { themeColor } from '../../utils'\nimport { Position } from './types'\n\nexport type ContextMenuListProps = {\n  labelId?: string\n  position?: Position\n}\n\nconst ContextMenuListStyle = styled.ul<ContextMenuListProps>`\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  padding: 0;\n\n  &:focus {\n    outline: none;\n  }\n`\nexport default ContextMenuListStyle\n\nexport const ContextMenuListWrapperStyle = styled.div.attrs(() => ({\n  role: 'menu',\n  tabIndex: -1,\n}))<ContextMenuListProps>`\n  order: ${({ position }) => (position === 'bottom' ? -1 : 0)};\n  background-color: ${themeColor('tint', 'level1')};\n  border: 1px solid ${themeColor('tint', 'level7')};\n  max-width: 250px;\n  width: 100%;\n\n  &:focus {\n    outline: none;\n  }\n`\ntry {\n    // @ts-ignore\n    ContextMenuListWrapperStyle.displayName = \"ContextMenuListWrapperStyle\";\n    // @ts-ignore\n    ContextMenuListWrapperStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ContextMenuListWrapperStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"position\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"position\", \"required\": false, \"type\": { \"name\": \"Position\" } }, \"labelId\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"labelId\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/ContextMenu/ContextMenuListStyle.ts#ContextMenuListWrapperStyle\"] = { docgenInfo: ContextMenuListWrapperStyle.__docgenInfo, name: \"ContextMenuListWrapperStyle\", path: \"packages/asc-ui/src/components/ContextMenu/ContextMenuListStyle.ts#ContextMenuListWrapperStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport { themeColor, getValueFromTheme } from '../../utils'\n\nexport type ContextMenuItemProps = {\n  role?: string\n  id: string\n  label: string\n  focused: boolean\n  divider?: boolean\n}\n\nexport const ContextMenuItemStyle = styled.li<ContextMenuItemProps>`\n  padding: 0 15px 0 0;\n  margin: 0;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 34px;\n  width: 100%;\n  cursor: pointer;\n  font-size: ${getValueFromTheme('typography.fontSize')};\n  text-decoration: none;\n  color: ${themeColor('tint', 'level7')};\n\n  & > span:first-of-type {\n    margin: 5px 6px;\n  }\n\n  ${({ divider }) =>\n    divider &&\n    css`\n      border-bottom: 1px solid ${themeColor('tint', 'level4')};\n    `}\n\n  &:hover,\n  &:focus {\n    outline: none;\n    background-color: ${themeColor('tint', 'level2')};\n  }\n`\n\nexport default ContextMenuItemStyle\ntry {\n    // @ts-ignore\n    ContextMenuItemStyle.displayName = \"ContextMenuItemStyle\";\n    // @ts-ignore\n    ContextMenuItemStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ContextMenuItemStyle\", \"props\": { \"label\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"label\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLLIElement) => void) | RefObject<HTMLLIElement>\" } }, \"divider\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"divider\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"focused\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"focused\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/ContextMenu/ContextMenuItemStyle.ts#ContextMenuItemStyle\"] = { docgenInfo: ContextMenuItemStyle.__docgenInfo, name: \"ContextMenuItemStyle\", path: \"packages/asc-ui/src/components/ContextMenu/ContextMenuItemStyle.ts#ContextMenuItemStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { margin } from 'polished'\nimport styled, { css } from '@datapunt/asc-core'\nimport { themeColor } from '../../utils'\n\ntype Props = {\n  gutter?: boolean\n  transparent?: boolean\n}\n\nconst DividerStyle = styled.hr<Props>`\n  height: 1px;\n  margin: 0;\n  border: none;\n  ${({ gutter }) =>\n    gutter &&\n    css`\n      ${margin(0, '15px')}\n    `}\n  background-color:\n    ${({ theme, transparent }) =>\n      transparent\n        ? 'background-color: transparent;'\n        : themeColor('tint', 'level4')({ theme })};\n`\n\nexport default DividerStyle\n","import { normalize } from 'polished'\nimport { createGlobalStyle } from '@datapunt/asc-core'\nimport { getValueFromTheme } from '../../utils'\n\nconst GlobalStyle = createGlobalStyle`\n  ${normalize()}\n  ${({ theme }) => getValueFromTheme('globalStyle')({ theme })}\n\n  body {\n    font-family: ${getValueFromTheme('typography.fontFamily')};\n  }\n\n  [aria-hidden=\"true\"] {\n    display: none !important;\n  }\n  \n  * {\n    box-sizing: border-box;\n  }\n  \n  *:focus {\n    outline: none;\n  }\n`\n\nexport default GlobalStyle\ntry {\n    // @ts-ignore\n    GlobalStyleComponent.displayName = \"GlobalStyleComponent\";\n    // @ts-ignore\n    GlobalStyleComponent.__docgenInfo = { \"description\": \"\", \"displayName\": \"GlobalStyleComponent\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"suppressMultiMountWarning\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"suppressMultiMountWarning\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/GlobalStyle/GlobalStyle.ts#GlobalStyleComponent\"] = { docgenInfo: GlobalStyleComponent.__docgenInfo, name: \"GlobalStyleComponent\", path: \"packages/asc-ui/src/components/GlobalStyle/GlobalStyle.ts#GlobalStyleComponent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react'\nimport MenuItemStyle from './MenuItemStyle'\n\ntype Props = React.HTMLProps<HTMLElement>\n\nexport default React.forwardRef<HTMLLIElement, Props>(function MenuItem(\n  { children, className, ...otherProps },\n  ref,\n) {\n  return (\n    <MenuItemStyle\n      className={className}\n      // @ts-ignore\n      ref={ref}\n      {...otherProps}\n    >\n      {children}\n    </MenuItemStyle>\n  )\n})\n","import styled, { css, keyframes } from '@datapunt/asc-core'\nimport { MenuItemStyle } from '../MenuItem'\nimport { EdgeDetectionTypes } from '../../../utils/hooks/useEdgeDetection'\nimport { showHide } from '../../../utils'\n\nexport type Props = {\n  edgeDetection?: EdgeDetectionTypes\n}\n\nconst show = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`\n\nexport default styled.ul<Props>`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-shrink: 0;\n  justify-content: flex-start;\n  flex-direction: row;\n  font-weight: 400;\n  animation: ${show} 0.1s linear;\n  background-color: inherit;\n\n  & > ${MenuItemStyle} {\n    font-weight: 500;\n  }\n\n  ${({ edgeDetection }) =>\n    edgeDetection &&\n    // @ts-ignore\n    Object.entries(edgeDetection).map(([position, value]) => {\n      return css`\n        ${value ? `${position}: 0;` : ''}\n      `\n    })}\n\n  ${showHide()}\n`\ntry {\n    // @ts-ignore\n    MenuListStyle.displayName = \"MenuListStyle\";\n    // @ts-ignore\n    MenuListStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"MenuListStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLUListElement) => void) | RefObject<HTMLUListElement>\" } }, \"edgeDetection\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"edgeDetection\", \"required\": false, \"type\": { \"name\": \"EdgeDetectionTypes\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Menu/MenuList/MenuListStyle.ts#MenuListStyle\"] = { docgenInfo: MenuListStyle.__docgenInfo, name: \"MenuListStyle\", path: \"packages/asc-ui/src/components/Menu/MenuList/MenuListStyle.ts#MenuListStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport { MenuItemStyle } from '../MenuItem'\nimport MenuListStyle from '../MenuList/MenuListStyle'\nimport { FLY_OUT_WIDTH, MENU_ITEM_SIZE } from '../constants'\nimport { themeColor } from '../../../utils'\n\nexport type Props = {\n  hasToggle?: boolean\n}\n\nexport default styled(MenuItemStyle).attrs({\n  tabIndex: -1, // Fix for Firefox to be able to blur\n  role: 'button',\n})<Props>`\n  ${MenuListStyle} {\n    background-color: ${themeColor('tint', 'level2')};\n    width: ${FLY_OUT_WIDTH}px;\n    top: ${MENU_ITEM_SIZE}px;\n    order: 0;\n    position: absolute;\n    text-align: left;\n    flex-direction: column;\n    ${({ hasToggle }) =>\n      !hasToggle &&\n      css`\n        border-bottom: 4px solid ${themeColor('tint', 'level7')};\n      `}\n\n    & > ${MenuItemStyle} {\n      font-weight: 400;\n    }\n  }\n\n  &[aria-hidden='false'] {\n    ${MenuListStyle} {\n      display: block;\n    }\n  } \n`\ntry {\n    // @ts-ignore\n    MenuFlyOutStyle.displayName = \"MenuFlyOutStyle\";\n    // @ts-ignore\n    MenuFlyOutStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"MenuFlyOutStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLLIElement) => void) | RefObject<HTMLLIElement>\" } }, \"hasToggle\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"hasToggle\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Menu/MenuFlyOut/MenuFlyOutStyle.ts#MenuFlyOutStyle\"] = { docgenInfo: MenuFlyOutStyle.__docgenInfo, name: \"MenuFlyOutStyle\", path: \"packages/asc-ui/src/components/Menu/MenuFlyOut/MenuFlyOutStyle.ts#MenuFlyOutStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export const FLY_OUT_WIDTH = 278\nexport const MENU_ITEM_SIZE = 50\n","import styled, { css } from '@datapunt/asc-core'\nimport { themeColor, svgFill } from '../../../utils'\nimport Button, { Props as ButtonProps } from '../../Button/Button'\nimport MenuFlyOutStyle from '../MenuFlyOut/MenuFlyOutStyle'\nimport { MenuListStyle } from '../MenuList'\nimport { IconStyle } from '../../Icon'\n\nexport const MenuButtonTextStyle = styled.span``\nexport const MenuButtonTextWrapperStyle = styled.span``\n\nexport type Props = { active?: boolean } & ButtonProps &\n  React.ButtonHTMLAttributes<HTMLButtonElement> &\n  React.AnchorHTMLAttributes<HTMLAnchorElement>\n\nexport const MenuButtonBaseStyle = styled(Button)<Props>`\n  position: relative;\n  line-height: 22px;\n  padding-left: 7px;\n  border-left: 8px solid transparent;\n  background-color: transparent;\n  height: 100%;\n  color: ${themeColor('tint', 'level7')};\n  align-items: center;\n  white-space: normal;\n\n  &[aria-expanded='true'] {\n    background-color: ${themeColor('tint', 'level2')};\n\n    ${MenuButtonTextStyle} {\n      border-bottom: 2px solid ${themeColor('secondary')};\n    }\n  }\n\n  & > ${MenuButtonTextWrapperStyle} {\n    flex-grow: 1;\n    text-align: left;\n  }\n\n  ${IconStyle} {\n    transform: rotate(0deg) translateY(3px);\n    align-self: flex-start;\n  }\n\n  &:not([aria-expanded='true']):hover,\n  &:not([aria-expanded='true']):focus {\n    background-color: transparent;\n  }\n`\n\nconst activeStyle = css`\n  color: ${themeColor('secondary')};\n  ${svgFill('secondary')}\n\n  ${MenuButtonTextStyle} {\n    color: ${themeColor('secondary')};\n    border-bottom: 2px solid ${themeColor('secondary')};\n  }\n`\n\nconst MenuButtonStyle = styled(MenuButtonBaseStyle)<Props>`\n  ${({ active }) =>\n    active\n      ? activeStyle\n      : css`\n          &:hover,\n          &:focus {\n            ${activeStyle}\n          }\n        `}\n\n  ${/* sc-selector */ MenuFlyOutStyle} ${/* sc-selector */ MenuListStyle} &,\n  ${/* sc-selector */ MenuFlyOutStyle}[aria-expanded='true'] {\n    font-weight: 400;\n  }\n`\n\nexport default MenuButtonStyle\ntry {\n    // @ts-ignore\n    MenuButtonTextStyle.displayName = \"MenuButtonTextStyle\";\n    // @ts-ignore\n    MenuButtonTextStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"MenuButtonTextStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLSpanElement) => void) | RefObject<HTMLSpanElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Menu/MenuButton/MenuButtonStyle.ts#MenuButtonTextStyle\"] = { docgenInfo: MenuButtonTextStyle.__docgenInfo, name: \"MenuButtonTextStyle\", path: \"packages/asc-ui/src/components/Menu/MenuButton/MenuButtonStyle.ts#MenuButtonTextStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    MenuButtonTextWrapperStyle.displayName = \"MenuButtonTextWrapperStyle\";\n    // @ts-ignore\n    MenuButtonTextWrapperStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"MenuButtonTextWrapperStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLSpanElement) => void) | RefObject<HTMLSpanElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Menu/MenuButton/MenuButtonStyle.ts#MenuButtonTextWrapperStyle\"] = { docgenInfo: MenuButtonTextWrapperStyle.__docgenInfo, name: \"MenuButtonTextWrapperStyle\", path: \"packages/asc-ui/src/components/Menu/MenuButton/MenuButtonStyle.ts#MenuButtonTextWrapperStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    MenuButtonBaseStyle.displayName = \"MenuButtonBaseStyle\";\n    // @ts-ignore\n    MenuButtonBaseStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"MenuButtonBaseStyle\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Menu/MenuButton/MenuButtonStyle.ts#MenuButtonBaseStyle\"] = { docgenInfo: MenuButtonBaseStyle.__docgenInfo, name: \"MenuButtonBaseStyle\", path: \"packages/asc-ui/src/components/Menu/MenuButton/MenuButtonStyle.ts#MenuButtonBaseStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { MenuButtonBaseStyle } from '../MenuButton/MenuButtonStyle'\n\nexport default styled(MenuButtonBaseStyle)`\n  font-weight: 700;\n  cursor: default;\n`\ntry {\n    // @ts-ignore\n    MenuItemTitleStyle.displayName = \"MenuItemTitleStyle\";\n    // @ts-ignore\n    MenuItemTitleStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"MenuItemTitleStyle\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Menu/MenuItemTitle/MenuItemTitleStyle.ts#MenuItemTitleStyle\"] = { docgenInfo: MenuItemTitleStyle.__docgenInfo, name: \"MenuItemTitleStyle\", path: \"packages/asc-ui/src/components/Menu/MenuItemTitle/MenuItemTitleStyle.ts#MenuItemTitleStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport {\n  themeColor,\n  showHide,\n  ShowHideTypes,\n  showAboveBackDrop,\n} from '../../../utils'\nimport { MenuItemTitleStyle } from '../MenuItemTitle'\nimport { MenuListStyle } from '../MenuList'\nimport { MenuFlyOutStyle } from '../MenuFlyOut'\nimport { FLY_OUT_WIDTH } from '../constants'\nimport MenuButtonStyle from '../MenuButton/MenuButtonStyle'\nimport { TOGGLE_BUTTON_SIZE } from '../../shared/constants'\nimport ToggleButtonStyle from '../../Button/ToggleButton'\n\nexport type Props = {\n  align?: 'left' | 'right'\n  onExpand?: Function\n  hasBackDrop?: boolean\n} & ShowHideTypes\n\nexport default styled.div<Props>`\n  display: flex;\n  flex-direction: column;\n  align-items: ${({ align }) => (align === 'left' ? 'flex-start' : `flex-end`)};\n  max-width: ${FLY_OUT_WIDTH}px;\n\n  & > ${MenuListStyle} {\n    border-bottom: 5px solid ${themeColor('tint', 'level7')};\n    ${showAboveBackDrop()}\n  }\n\n  & > ${ToggleButtonStyle} {\n    ${showAboveBackDrop()}\n  }\n\n  ${MenuListStyle} {\n    position: absolute;\n    width: ${FLY_OUT_WIDTH}px;\n    flex-direction: column;\n    top: ${TOGGLE_BUTTON_SIZE}px;\n    ${({ align }) =>\n      align === 'left'\n        ? css`\n            left: 0;\n          `\n        : css`\n            right: 0;\n          `};\n  }\n\n  ${MenuButtonStyle} {\n    border-bottom: 1px solid ${themeColor('tint', 'level3')};\n    background-color: ${themeColor('tint', 'level2')};\n\n    &:hover,\n    &:focus {\n      background-color: ${themeColor('tint', 'level2')};\n    }\n  }\n\n  & ${MenuFlyOutStyle} {\n    ${MenuButtonStyle} {\n      border-left-color: ${themeColor('tint', 'level2')};\n    }\n\n    & > ${/* sc-selector */ MenuButtonStyle}[aria-expanded=\"true\"] {\n      border-left-color: ${themeColor('secondary')};\n    }\n\n    ${MenuListStyle} {\n      ${MenuButtonStyle} {\n        background-color: ${themeColor('tint', 'level1')};\n        &:hover,\n        &:focus {\n          background-color: ${themeColor('tint', 'level1')};\n        }\n      }\n    }\n  }\n\n  ${MenuListStyle} {\n    flex-shrink: 0;\n    background-color: ${themeColor('tint', 'level2')};\n  }\n\n  ${MenuFlyOutStyle} {\n    ${MenuItemTitleStyle} {\n      border-bottom: 1px solid ${themeColor('tint', 'level3')};\n      border-left-color: ${themeColor('tint', 'level2')};\n    }\n    ${MenuListStyle} {\n      background-color: ${themeColor('tint', 'level1')};\n      position: relative;\n      top: 0;\n    }\n  }\n\n  ${showHide()}\n`\ntry {\n    // @ts-ignore\n    MenuToggleStyle.displayName = \"MenuToggleStyle\";\n    // @ts-ignore\n    MenuToggleStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"MenuToggleStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"align\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"align\", \"required\": false, \"type\": { \"name\": \"\\\"left\\\" | \\\"right\\\"\" } }, \"hasBackDrop\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"hasBackDrop\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"hideAt\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"hideAt\", \"required\": false, \"type\": { \"name\": \"\\\"mobileS\\\" | \\\"mobileM\\\" | \\\"mobileL\\\" | \\\"tabletS\\\" | \\\"tabletM\\\" | \\\"laptop\\\" | \\\"laptopM\\\" | \\\"laptopL\\\" | \\\"desktop\\\" | \\\"desktopL\\\"\" } }, \"showAt\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"showAt\", \"required\": false, \"type\": { \"name\": \"\\\"mobileS\\\" | \\\"mobileM\\\" | \\\"mobileL\\\" | \\\"tabletS\\\" | \\\"tabletM\\\" | \\\"laptop\\\" | \\\"laptopM\\\" | \\\"laptopL\\\" | \\\"desktop\\\" | \\\"desktopL\\\"\" } }, \"onExpand\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onExpand\", \"required\": false, \"type\": { \"name\": \"Function\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Menu/MenuToggle/MenuToggleStyle.ts#MenuToggleStyle\"] = { docgenInfo: MenuToggleStyle.__docgenInfo, name: \"MenuToggleStyle\", path: \"packages/asc-ui/src/components/Menu/MenuToggle/MenuToggleStyle.ts#MenuToggleStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { MenuListStyle } from '../MenuList'\nimport { MenuItemStyle } from '../MenuItem'\nimport { showHide, ShowHideTypes, showAboveBackDrop } from '../../../utils'\nimport { MENU_ITEM_SIZE } from '../constants'\n\nexport type Props = {\n  onExpand?: Function\n  hasBackDrop?: boolean\n} & ShowHideTypes\n\nconst MenuInlineStyle = styled(MenuListStyle)<Props>`\n  position: relative;\n\n  & > ${MenuItemStyle} {\n    height: ${MENU_ITEM_SIZE}px;\n  }\n\n  ${showAboveBackDrop()}\n  ${showHide()}\n`\n\nexport default MenuInlineStyle\n","import React from 'react'\nimport MenuInlineStyle, { Props } from './MenuInlineStyle'\nimport MenuContext from '../MenuContext'\nimport BackDrop from '../../BackDrop/BackDrop'\nimport useDebounce from '../../../utils/hooks/useDebounce'\n\nconst MenuInline: React.FC<Props> = ({\n  children,\n  onExpand,\n  hasBackDrop,\n  ...otherProps\n}) => {\n  const [menuOpen, setMenuOpen] = React.useState(false)\n\n  // prevents the backdrop from flickering when you hover to the next menu items\n  const handleOnExpand = useDebounce((expand: boolean) => {\n    setMenuOpen(expand)\n\n    return onExpand && onExpand(expand)\n  }, 50)\n\n  return (\n    <MenuContext.Provider\n      value={{\n        onExpand: handleOnExpand,\n      }}\n    >\n      <MenuInlineStyle hasBackDrop={hasBackDrop} {...otherProps}>\n        {children}\n      </MenuInlineStyle>\n      {hasBackDrop && menuOpen && (\n        <BackDrop onClick={handleOnExpand} hideOverFlow={false} />\n      )}\n    </MenuContext.Provider>\n  )\n}\n\nexport default MenuInline\n","import styled from '@datapunt/asc-core'\nimport { size } from 'polished'\nimport IconStyle from '../../Icon/IconStyle'\nimport ButtonStyle, {\n  Props as ButtonStyleProps,\n} from '../../Button/ButtonStyle'\n\nexport type Props = {\n  /**\n   * @deprecated Please use the size prop instead.\n   */\n  iconSize?: number\n} & ButtonStyleProps\n\nexport const IconButtonStyle = styled(ButtonStyle)<Props>`\n  border: none;\n  outline: none;\n  padding: 0;\n\n  ${IconStyle} {\n    ${({ iconSize }) => iconSize && size(iconSize)}\n  }\n`\nexport default IconButtonStyle\ntry {\n    // @ts-ignore\n    IconButtonStyle.displayName = \"IconButtonStyle\";\n    // @ts-ignore\n    IconButtonStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"IconButtonStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLButtonElement) => void) | RefObject<HTMLButtonElement>\" } }, \"variant\": { \"defaultValue\": null, \"description\": \"A variant, usually different background-color and color of a button\", \"name\": \"variant\", \"required\": false, \"type\": { \"name\": \"\\\"primary\\\" | \\\"secondary\\\" | \\\"tertiary\\\" | \\\"primaryInverted\\\" | \\\"textButton\\\" | \\\"blank\\\" | \\\"application\\\"\" } }, \"square\": { \"defaultValue\": null, \"description\": \"Deprecated: use size to create a button with equal width and height\\n@deprecated\", \"name\": \"square\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"size\": { \"defaultValue\": null, \"description\": \"Set an equal height and width\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"taskflow\": { \"defaultValue\": null, \"description\": \"Add narrow arrow on the right side of the secondary button\", \"name\": \"taskflow\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"iconSize\": { \"defaultValue\": null, \"description\": \"@deprecated Please use the size prop instead.\", \"name\": \"iconSize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/deprecated/IconButton/IconButtonStyle.ts#IconButtonStyle\"] = { docgenInfo: IconButtonStyle.__docgenInfo, name: \"IconButtonStyle\", path: \"packages/asc-ui/src/components/deprecated/IconButton/IconButtonStyle.ts#IconButtonStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\n\nconst RadioItemStyle = styled.div`\n  position: relative;\n`\nexport default RadioItemStyle\n","import styled from '@datapunt/asc-core'\n\ninterface Props {\n  htmlFor: string\n  disabled?: boolean\n}\n\nconst RasdioLabelStyle = styled.label.attrs<Props>(({ htmlFor, disabled }) => {\n  return {\n    htmlFor,\n    disabled,\n  }\n})<Props>`\n  color: ${props => (props.disabled ? '#bebebe' : '#434343')};\n  font-weight: 400;\n  font-size: 16px;\n  padding-left: 38px;\n  line-height: 28px;\n\n  &::before {\n    border-radius: 50%;\n    border: ${props =>\n      props.disabled ? '1px solid #bebebe' : '1px solid #000'};\n    content: '';\n    height: calc(28px - 4px);\n    left: 0;\n    position: absolute;\n    top: 0;\n    width: calc(28px - 4px);\n    zoom: 1;\n  }\n\n  &::after {\n    background-color: #0000;\n    border: 6px solid;\n    border-radius: 50%;\n    color: ${props => (props.disabled ? '#bebebe' : '#000')};\n    content: '';\n    height: 0;\n    left: 7px;\n    opacity: 0;\n    position: absolute;\n    top: 7px;\n    width: 0;\n    zoom: 1;\n  }\n\n  input[type='radio']:checked + &::after {\n    opacity: 1;\n    zoom: 1;\n  }\n`\nexport default RasdioLabelStyle\n","import styled from '@datapunt/asc-core'\nimport RadioItemStyle from './RadioItemStyle'\n\ntype Props = {\n  orientation?: string\n}\n\nconst RadioGroupStyle = styled.div<Props>`\n  ${RadioItemStyle} {\n    display: ${props =>\n      props.orientation === 'horizontal' ? 'inline-block' : 'block'};\n    margin-right: ${props =>\n      props.orientation === 'horizontal' ? '24px' : '0'};\n  }\n`\n\nexport default RadioGroupStyle\n","import * as React from 'react'\nimport RadioItemStyle from './RadioItemStyle'\nimport RadioLabelStyle from './RadioLabelStyle'\nimport RadioGroupStyle from './RadioGroupStyle'\n\ninterface Props {\n  id: string\n  name?: string\n  label: string\n  value?: string\n  defaultChecked?: boolean\n  disabled?: boolean\n}\n\nconst Radio = ({ id, value, label, disabled }: Props) => (\n  <RadioItemStyle>\n    <RadioLabelStyle htmlFor={id} disabled={disabled}>\n      {label || value}\n    </RadioLabelStyle>\n  </RadioItemStyle>\n)\n\nexport default Radio\n\nexport const RadioGroup: React.FC<{}> = ({ children, ...otherProps }) => (\n  <RadioGroupStyle {...otherProps}>{children}</RadioGroupStyle>\n)\ntry {\n    // @ts-ignore\n    Radio.displayName = \"Radio\";\n    // @ts-ignore\n    Radio.__docgenInfo = { \"description\": \"\", \"displayName\": \"Radio\", \"props\": { \"id\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"id\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"label\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"label\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"value\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"value\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"defaultChecked\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"defaultChecked\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"disabled\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"disabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Radio/Radio.tsx#Radio\"] = { docgenInfo: Radio.__docgenInfo, name: \"Radio\", path: \"packages/asc-ui/src/components/Radio/Radio.tsx#Radio\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    RadioGroup.displayName = \"RadioGroup\";\n    // @ts-ignore\n    RadioGroup.__docgenInfo = { \"description\": \"\", \"displayName\": \"RadioGroup\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Radio/Radio.tsx#RadioGroup\"] = { docgenInfo: RadioGroup.__docgenInfo, name: \"RadioGroup\", path: \"packages/asc-ui/src/components/Radio/Radio.tsx#RadioGroup\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { themeColor } from '../../../utils'\n\nexport type Props = {}\n\nexport default styled.div<Props>`\n  background-color: ${themeColor('tint', 'level1')};\n`\ntry {\n    // @ts-ignore\n    FooterBottomStyle.displayName = \"FooterBottomStyle\";\n    // @ts-ignore\n    FooterBottomStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"FooterBottomStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Footer/FooterBottom/FooterBottomStyle.ts#FooterBottomStyle\"] = { docgenInfo: FooterBottomStyle.__docgenInfo, name: \"FooterBottomStyle\", path: \"packages/asc-ui/src/components/Footer/FooterBottom/FooterBottomStyle.ts#FooterBottomStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { ShowHideTypes, showHide, themeColor } from '../../../utils'\nimport ParagraphStyle from '../../Paragraph/ParagraphStyle'\n\nexport interface Props extends ShowHideTypes {\n  indent?: boolean\n}\n\nexport default styled.div<Props>`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  margin-left: ${({ indent }) => (indent ? '28px' : '0')};\n  ${showHide}\n\n  ${ParagraphStyle} {\n    color: ${themeColor('tint', 'level1')};\n  }\n`\ntry {\n    // @ts-ignore\n    FooterContentStyle.displayName = \"FooterContentStyle\";\n    // @ts-ignore\n    FooterContentStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"FooterContentStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"hideAt\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"hideAt\", \"required\": false, \"type\": { \"name\": \"\\\"mobileS\\\" | \\\"mobileM\\\" | \\\"mobileL\\\" | \\\"tabletS\\\" | \\\"tabletM\\\" | \\\"laptop\\\" | \\\"laptopM\\\" | \\\"laptopL\\\" | \\\"desktop\\\" | \\\"desktopL\\\"\" } }, \"showAt\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"showAt\", \"required\": false, \"type\": { \"name\": \"\\\"mobileS\\\" | \\\"mobileM\\\" | \\\"mobileL\\\" | \\\"tabletS\\\" | \\\"tabletM\\\" | \\\"laptop\\\" | \\\"laptopM\\\" | \\\"laptopL\\\" | \\\"desktop\\\" | \\\"desktopL\\\"\" } }, \"indent\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"indent\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Footer/FooterContent/FooterContentStyle.ts#FooterContentStyle\"] = { docgenInfo: FooterContentStyle.__docgenInfo, name: \"FooterContentStyle\", path: \"packages/asc-ui/src/components/Footer/FooterContent/FooterContentStyle.ts#FooterContentStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport Heading, { Props } from '../../Heading/Heading'\nimport { themeColor } from '../../../utils'\n\nexport { Props }\n\nconst FooterHeadingStyle = styled(Heading)<Props>`\n  margin-top: 0;\n  margin-bottom: 8px;\n  color: ${themeColor('tint', 'level1')};\n  display: flex;\n`\n\nexport default FooterHeadingStyle\n","import React from 'react'\nimport FooterHeadingStyle, { Props } from './FooterHeadingStyle'\n\nexport { Props }\n\nconst FooterHeading: React.FC<\n  Props & React.HTMLAttributes<HTMLHeadingElement>\n> = ({ children, ...otherProps }) => {\n  return <FooterHeadingStyle {...otherProps}>{children}</FooterHeadingStyle>\n}\n\nFooterHeading.defaultProps = {\n  $as: 'h3',\n}\n\nexport default FooterHeading\n","import React from 'react'\nimport styled from '@datapunt/asc-core'\n\nexport interface Props extends React.HTMLAttributes<HTMLElement> {}\n\nexport default styled.footer<Props>`\n  width: 100%;\n`\ntry {\n    // @ts-ignore\n    FooterStyle.displayName = \"FooterStyle\";\n    // @ts-ignore\n    FooterStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"FooterStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLElement) => void) | RefObject<HTMLElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Footer/FooterStyle.ts#FooterStyle\"] = { docgenInfo: FooterStyle.__docgenInfo, name: \"FooterStyle\", path: \"packages/asc-ui/src/components/Footer/FooterStyle.ts#FooterStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { breakpoint, themeColor } from '../../../utils'\n\nexport type Props = {}\n\nexport default styled.div<Props>`\n  background-color: ${themeColor('tint', 'level5')};\n  padding-top: 32px;\n\n  @media screen and ${breakpoint('min-width', 'tabletM')} {\n    padding-bottom: 24px;\n  }\n`\ntry {\n    // @ts-ignore\n    FooterTopStyle.displayName = \"FooterTopStyle\";\n    // @ts-ignore\n    FooterTopStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"FooterTopStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Footer/FooterTop/FooterTopStyle.ts#FooterTopStyle\"] = { docgenInfo: FooterTopStyle.__docgenInfo, name: \"FooterTopStyle\", path: \"packages/asc-ui/src/components/Footer/FooterTop/FooterTopStyle.ts#FooterTopStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react'\nimport styled from '@datapunt/asc-core'\nimport { themeColor, svgFill } from '../../../utils'\nimport { ListItem } from '../../List'\nimport TypographyStyle from '../../Typography/TypographyStyle'\nimport IconStyle from '../../Icon/IconStyle'\nimport LinkStyle from '../../Link/LinkStyle'\n\nconst StyledListItem = styled(ListItem)`\n  ${TypographyStyle} {\n    color: ${themeColor('tint', 'level1')};\n  }\n\n  ${IconStyle} {\n    ${svgFill('tint', 'level1')};\n  }\n\n  ${LinkStyle} {\n    color: ${themeColor('tint', 'level1')};\n    background-color: transparent;\n\n    &:hover {\n      color: ${themeColor('tint', 'level1')};\n      text-decoration: underline;\n\n      ${IconStyle} {\n        ${svgFill('tint', 'level1')};\n      }\n    }\n  }\n`\n\nconst FooterLinkListItem = ({ children, ...otherProps }: any) => (\n  <StyledListItem {...otherProps}>{children}</StyledListItem>\n)\n\nexport default FooterLinkListItem\ntry {\n    // @ts-ignore\n    FooterLinkListItem.displayName = \"FooterLinkListItem\";\n    // @ts-ignore\n    FooterLinkListItem.__docgenInfo = { \"description\": \"\", \"displayName\": \"FooterLinkListItem\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Footer/FooterLinkList/FooterLinkListItem.tsx#FooterLinkListItem\"] = { docgenInfo: FooterLinkListItem.__docgenInfo, name: \"FooterLinkListItem\", path: \"packages/asc-ui/src/components/Footer/FooterLinkList/FooterLinkListItem.tsx#FooterLinkListItem\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { ListItem } from '../../List'\nimport LinkStyle from '../../Link/LinkStyle'\nimport { breakpoint } from '../../../utils'\n\nconst FooterBottomListItem = styled(ListItem)`\n  margin-right: 52px;\n  & > ${LinkStyle} {\n    font-size: 14px;\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  @media screen and ${breakpoint('max-width', 'tabletM')} {\n    margin-right: 20px;\n  }\n`\n\nexport default FooterBottomListItem\n","import React from 'react'\nimport styled from '@datapunt/asc-core'\nimport { ChevronDown } from '@datapunt/asc-assets'\nimport Icon from '../../Icon'\nimport { ToggleHandlerProps } from '../../Toggle'\nimport IconStyle from '../../Icon/IconStyle'\nimport FooterHeading from '../FooterHeading'\nimport { svgFill } from '../../../utils'\n\nexport type Props = ToggleHandlerProps\n\nconst ToggleFooterHeader: React.FC<Props> = ({ open, onClick, title }) => {\n  const StyledFooterHeading: any = styled(FooterHeading)<Props>`\n    margin-bottom: ${({ open: isOpen }) => (isOpen ? '0' : '8px')};\n    cursor: pointer;\n    &:hover {\n      text-decoration: underline;\n    }\n\n    & > ${IconStyle} {\n      margin-right: 8px;\n      ${svgFill('tint', 'level1')};\n    }\n  `\n\n  return (\n    <StyledFooterHeading $as=\"h3\" onClick={onClick}>\n      <Icon rotate={open ? 180 : 0} size={20}>\n        <ChevronDown />\n      </Icon>\n      {title && title}\n    </StyledFooterHeading>\n  )\n}\n\nexport default ToggleFooterHeader\n","import React from 'react'\nimport styled from '@datapunt/asc-core'\nimport ToggleFooterHeader from './ToggleFooterHeader'\nimport { Toggle } from '../../Toggle'\nimport { ShowHideTypes } from '../../../utils'\n\ntype Props = {\n  title?: string\n} & ShowHideTypes\n\nconst FooterToggle: React.FC<Props> = ({ title, children, ...otherProps }) => {\n  const StyledFooterToggle = styled(Toggle)`\n    margin-bottom: 24px;\n  `\n  return (\n    <StyledFooterToggle\n      ToggleHandler={ToggleFooterHeader}\n      title={title}\n      align=\"left\"\n      {...otherProps}\n    >\n      {children}\n    </StyledFooterToggle>\n  )\n}\n\nexport default FooterToggle\n","import styled, { css, Theme } from '@datapunt/asc-core'\nimport { svgFill } from '../../utils'\n\nexport type Props = {\n  inline?: boolean\n  color?: Theme.ColorType\n  iconUrl?: string\n  size?: number\n  padding?: number\n  rotate?: number\n}\n\nexport const defaultProps = {\n  size: 20,\n  padding: 0,\n  rotate: 0,\n}\n\nconst IconStyle = styled.span<Props>`\n  display: ${({ inline }) => (inline ? 'inline-flex' : 'flex')};\n  ${({ iconUrl }) => iconUrl && `background-image: ${iconUrl}`}\n  ${({ size = defaultProps.size, padding = defaultProps.padding }) => css`\n    width: ${size - padding * 2}px;\n    height: ${size - padding * 2}px;\n  `}\n  ${({ padding }) =>\n    padding &&\n    css`\n      padding: ${padding}px;\n    `};\n  box-sizing: content-box;\n  ${({ rotate = defaultProps.rotate }) => `transform: rotate(${rotate}deg)`};\n\n  & > svg {\n    ${({ size = defaultProps.size, padding = defaultProps.padding }) => css`\n      width: ${size - padding * 2}px;\n      height: ${size - padding * 2}px;\n    `}\n  }\n  \n  ${({ color, theme }) => svgFill(color)({ theme })};\n`\n\nexport default IconStyle\n","import styled, { Theme, css } from '@datapunt/asc-core'\nimport { transitions, readableColor, darken, size } from 'polished'\nimport {\n  themeColor,\n  focusStyleOutline,\n  svgFill,\n  themeSpacing,\n} from '../../utils'\nimport { flexboxMinHeightFix } from '../shared/ie-fixes'\nimport Icon from '../Icon'\n\nexport enum ButtonVariants {\n  primary,\n  secondary,\n  tertiary,\n  primaryInverted,\n  textButton,\n  blank, // blank variant is a plain white button with a grey background on hover\n  application,\n}\n\nconst defaultProps = {\n  size: 30,\n}\n\nexport const ArrowRight = styled.div`\n  position: absolute;\n  top: 0;\n  right: -37px;\n  width: 0;\n  height: 0;\n  border: 22px solid rgba(255, 255, 255, 0);\n  border-left: 15px solid ${themeColor('secondary')};\n  ${transitions('border-color', '0.1s ease-in-out')}\n  :after {\n    content: '';\n    position: absolute;\n    top: -26px;\n    right: -30px;\n    width: 0;\n    height: 0;\n    border: 26px solid rgba(255, 255, 255, 0);\n    border-left: 17px solid ${themeColor('support', 'focus')};\n    z-index: -1;\n    opacity: 0;\n  }\n`\n\nexport const IconLeft = styled(Icon)`\n  margin-right: 10px;\n`\nexport const IconRight = styled(Icon)`\n  margin-left: 10px;\n`\n\nconst getVariant = () => ({\n  theme,\n  variant,\n  color,\n}: {\n  theme: any\n  variant?: keyof typeof ButtonVariants\n  color?: Theme.ColorType\n}) => {\n  switch (variant) {\n    case 'primary':\n      return css`\n        background-color: ${themeColor('primary')};\n        color: ${readableColor(themeColor('primary')({ theme }))};\n        ${svgFill('tint', 'level1')};\n\n        &:hover {\n          background-color: ${darken(0.1, themeColor('primary')({ theme }))};\n        }\n      `\n\n    case 'secondary':\n      return css`\n        background-color: ${themeColor('secondary')};\n        color: ${themeColor('tint', 'level1')};\n        ${svgFill('tint', 'level1')};\n\n        &:hover {\n          background-color: ${darken(0.1, themeColor('secondary')({ theme }))};\n        }\n\n        ${taskflow =>\n          taskflow &&\n          css`\n            &:not(:disabled)&:hover ${ArrowRight} {\n              border-left-color: ${darken(\n                0.1,\n                themeColor('secondary')({ theme }),\n              )};\n            }\n          `}\n      `\n\n    case 'tertiary':\n      return css`\n        background-color: ${themeColor('tint', 'level4')};\n        ${svgFill('tint', 'level7')};\n\n        &:hover {\n          background-color: ${darken(\n            0.1,\n            themeColor('tint', 'level4')({ theme }),\n          )};\n        }\n      `\n\n    case 'primaryInverted':\n      return css`\n        color: ${themeColor('primary')};\n        border: 1px solid ${themeColor('primary')};\n        ${svgFill('primary')};\n\n        &:hover {\n          outline: 1px solid ${themeColor('primary')};\n        }\n      `\n\n    case 'textButton':\n      return css`\n        height: auto;\n        padding: 0;\n        align-self: baseline;\n        white-space: normal;\n        text-align: left;\n        color: ${themeColor('primary')};\n        background-color: rgba(0, 0, 0, 0);\n        font-weight: 700;\n        ${svgFill('primary')};\n\n        /* remove transition because it's async with Icon */\n        ${transitions('color', '0s')}\n\n        &:hover {\n          color: ${themeColor('secondary')};\n          ${svgFill('secondary')};\n        }\n\n        ${IconLeft} {\n          margin-right: ${themeSpacing(1)};\n        }\n        ${IconRight} {\n          margin-left: ${themeSpacing(1)};\n        }\n      `\n\n    case 'blank':\n      return css`\n        background-color: ${themeColor('tint', 'level1')};\n        ${svgFill('tint', 'level7')}\n        &:hover {\n          background-color: ${themeColor('tint', 'level3')};\n        }\n      `\n    case 'application':\n      return css`\n        border: 1px solid ${themeColor('tint', 'level7')};\n        background-color: ${themeColor('tint', 'level1')};\n        height: 32px;\n        padding: ${themeSpacing(1, 2)};\n        ${svgFill('tint', 'level7')}\n        &:hover {\n          background-color: ${themeColor('tint', 'level4')};\n        }\n      `\n    default:\n      // About-to-be-deprecated codeblock to support the 'color' prop\n      return css`\n        color: ${color\n          ? readableColor(themeColor(color)({ theme }))\n          : themeColor('primary')({ theme })};\n        ${color &&\n          css`\n            background: ${themeColor(color)};\n          `}\n\n        ${!color &&\n          css`\n            border: 1px solid ${themeColor('primary')};\n          `}\n\n        &:hover {\n          background: ${color\n            ? themeColor(color, 'dark')({ theme })\n            : themeColor('tint', 'level3')({ theme })};\n          ${!color &&\n            css`\n              outline: 1px solid ${themeColor('primary')};\n            `}\n        }\n      `\n  }\n}\n\nexport type Props = {\n  /**\n   * Deprecated: Use variant instead. Pass the theme-color.\n   * @deprecated\n   */\n  color?: Theme.ColorType\n  /**\n   * Deprecated: use size to create a button with equal width and height\n   * @deprecated\n   */\n  square?: boolean\n  /**\n   * Set an equal height and width\n   */\n  size?: number\n  /**\n   * A variant, usually different background-color and color of a button\n   */\n  variant?: keyof typeof ButtonVariants\n  /**\n   * Add narrow arrow on the right side of the secondary button\n   */\n  taskflow?: boolean\n}\n\nconst ButtonStyle = styled.button<Props>`\n  height: 44px;\n  white-space: nowrap;\n  display: inline-flex;\n  align-items: center;\n  text-decoration: none;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 20px;\n  padding: ${({ size: sizeProp }) => (sizeProp ? '0' : '12px 15px')};\n  ${({ size: sizeProp, square }) =>\n    (sizeProp || square) && // make the button square\n    css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      ${size(sizeProp || defaultProps.size)} // width and height\n    `}\n  ${focusStyleOutline()}\n  ${transitions(['color', 'background-color'], '0.1s ease-in-out')}\n  ${getVariant()}\n  ${flexboxMinHeightFix()} // ie fix\n  ${({ taskflow }) =>\n    taskflow &&\n    css`\n      position: relative;\n      z-index: 0;\n      && {\n        margin-right: 25px;\n      }\n      &:focus ${ArrowRight}:after {\n        opacity: 1;\n      }\n    `}\n  &:disabled {\n    cursor: default;\n    outline: none;\n    border: none;\n    color: ${themeColor('tint', 'level4')};\n    background-color: ${themeColor('tint', 'level3')};\n    ${svgFill('tint', 'level4')};\n    text-decoration: none;\n    ${({ taskflow }) =>\n      taskflow &&\n      css`\n        ${ArrowRight} {\n          border-left-color: ${themeColor('tint', 'level3')};\n        }\n      `}\n    ${({ variant }) =>\n      variant &&\n      variant === 'textButton' &&\n      css`\n        background-color: rgba(0, 0, 0, 0);\n      `}\n    }\n`\n\nexport default ButtonStyle\ntry {\n    // @ts-ignore\n    ArrowRight.displayName = \"ArrowRight\";\n    // @ts-ignore\n    ArrowRight.__docgenInfo = { \"description\": \"\", \"displayName\": \"ArrowRight\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Button/ButtonStyle.ts#ArrowRight\"] = { docgenInfo: ArrowRight.__docgenInfo, name: \"ArrowRight\", path: \"packages/asc-ui/src/components/Button/ButtonStyle.ts#ArrowRight\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    IconLeft.displayName = \"IconLeft\";\n    // @ts-ignore\n    IconLeft.__docgenInfo = { \"description\": \"\", \"displayName\": \"IconLeft\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Button/ButtonStyle.ts#IconLeft\"] = { docgenInfo: IconLeft.__docgenInfo, name: \"IconLeft\", path: \"packages/asc-ui/src/components/Button/ButtonStyle.ts#IconLeft\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    IconRight.displayName = \"IconRight\";\n    // @ts-ignore\n    IconRight.__docgenInfo = { \"description\": \"\", \"displayName\": \"IconRight\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Button/ButtonStyle.ts#IconRight\"] = { docgenInfo: IconRight.__docgenInfo, name: \"IconRight\", path: \"packages/asc-ui/src/components/Button/ButtonStyle.ts#IconRight\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { Theme, css } from '@datapunt/asc-core'\nimport { themeColor } from '../../utils'\nimport { perceivedLoading } from '../../utils/themeUtils'\nimport CardActionsStyle from './CardActionsStyle'\nimport { CardMediaWrapperStyle } from './CardMediaStyle'\nimport CardContentStyle from './CardContentStyle'\n\nexport type Props = {\n  maxWidth?: number\n  shadow?: boolean\n  horizontal?: boolean\n  backgroundColor?: keyof Theme.Tint\n  isLoading?: boolean\n  animateLoading?: boolean\n}\n\nconst CardStyle = styled.div<Props>`\n  ${({ maxWidth }) => maxWidth && `max-width: ${maxWidth}px;`}\n  ${({ shadow, theme }) =>\n    shadow && `box-shadow: 2px 2px ${themeColor('tint', 'level3')({ theme })};`}\n  background-color: ${({ backgroundColor, theme }) =>\n    themeColor('tint', backgroundColor || 'level1')({ theme })};\n  display: flex;\n  flex-direction: ${({ horizontal }) => (horizontal ? 'row' : 'column')};\n  justify-content: space-between;\n  align-items: center;\n  ${({ horizontal }) =>\n    horizontal &&\n    css`\n      ${CardActionsStyle} {\n        width: initial;\n        padding: 24px 16px;\n      }\n    `}\n\n  ${({ isLoading, animateLoading, theme }) =>\n    isLoading &&\n    css`\n      ${perceivedLoading(theme, animateLoading)}\n\n      ${CardMediaWrapperStyle} {\n        ${perceivedLoading(theme, animateLoading)}\n      }\n      ${CardContentStyle} > * {\n        display: none;\n      }\n    `}`\n\nexport default CardStyle\n","import styled from '@datapunt/asc-core'\nimport CardStyle from './CardStyle'\n\nconst CardContainerStyle = styled.div`\n  width: 100%;\n\n  ${CardStyle} {\n    margin-bottom: 12px;\n  }\n`\n\nexport default CardContainerStyle\n","import * as React from 'react'\n\nimport CardStyle, { Props } from './CardStyle'\n\nconst Card: React.FC<Props> = ({ children, ...otherProps }) => (\n  <CardStyle {...otherProps}>{children}</CardStyle>\n)\n\nexport default Card\ntry {\n    // @ts-ignore\n    Card.displayName = \"Card\";\n    // @ts-ignore\n    Card.__docgenInfo = { \"description\": \"\", \"displayName\": \"Card\", \"props\": { \"maxWidth\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"maxWidth\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"shadow\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shadow\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"horizontal\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"horizontal\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"backgroundColor\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"backgroundColor\", \"required\": false, \"type\": { \"name\": \"\\\"level5\\\" | \\\"level1\\\" | \\\"level7\\\" | \\\"level6\\\" | \\\"level4\\\" | \\\"level3\\\" | \\\"level2\\\"\" } }, \"isLoading\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isLoading\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"animateLoading\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"animateLoading\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Card/Card.tsx#Card\"] = { docgenInfo: Card.__docgenInfo, name: \"Card\", path: \"packages/asc-ui/src/components/Card/Card.tsx#Card\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { css, keyframes, Theme } from '@datapunt/asc-core'\n\nimport { fromProps } from './fromProps'\nimport { BACKDROP_Z_INDEX } from '../components/shared/constants'\n\nimport BreakpointsInterface = Theme.BreakpointsInterface\nimport ThemeInterface = Theme.ThemeInterface\nimport TypographyInterface = Theme.TypographyInterface\nimport TypographyElementStyle = Theme.TypographyElementStyle\n\ntype ThemeProp = {\n  theme: Theme.ThemeInterface\n}\n\n/**\n * Curry function to provide the theme as first parameter, followed up with other parameters\n * @param cb\n *\n * @example\n * const myThemeHelperFunction = withTheme((theme, ...otherParams) => {\n *   ...\n * })\n *\n * css`\n *  ${myThemeHelperFunction(param1, param2)}\n * `\n */\nexport const withTheme = <T extends any[]>(\n  cb: (theme: ThemeInterface, ...params: T) => any,\n) => (...params: T) => ({ theme }: { theme: ThemeInterface }) =>\n  cb(theme, ...params)\n\ntype ThemeColorParameters = [Theme.ColorType?, string?, string?]\n\n/**\n * A shortcut to the `fromProps` that will get a value out of the props.theme object\n */\nexport const getValueFromTheme = withTheme<[string, Function?]>(\n  (theme, identifier, callback) => fromProps(identifier, callback)(theme),\n)\n\nexport const themeColor = withTheme<ThemeColorParameters>(\n  (theme, colorType, colorSubtype = 'main', override) => {\n    if (override) {\n      return override\n    }\n\n    if (colorType) {\n      return getValueFromTheme(`colors.${[colorType]}.${[colorSubtype]}`)({\n        theme,\n      })\n    }\n\n    return getValueFromTheme('colors.tint.level1')({ theme })\n  },\n)\n\ntype BreakpointsType = [Theme.TypeBreakpoint, keyof BreakpointsInterface]\n\nexport const breakpoint = withTheme<BreakpointsType>((theme, type, variant) => {\n  const breakpointFunc: Theme.GetBreakpointFunc = getValueFromTheme(\n    `breakpoints.${[variant]}`,\n  )({\n    theme,\n  })\n  return breakpointFunc && breakpointFunc(type)\n})\n\nconst generateCSSFromTypography = (\n  {\n    color,\n    fontWeight,\n    fontSize,\n    letterSpacing,\n    lineHeight,\n    marginBottom,\n  }: Partial<TypographyElementStyle>,\n  gutterBottom?: number,\n) => css`\n  color: ${color};\n  font-weight: ${fontWeight};\n  font-size: ${fontSize};\n  letter-spacing: ${letterSpacing};\n  line-height: ${lineHeight};\n  margin-bottom: ${typeof gutterBottom === 'number'\n    ? `${gutterBottom}px`\n    : marginBottom};\n`\n\nexport const getTypographyFromTheme = () => ({\n  as: asProp = 'p',\n  gutterBottom,\n  styleAs,\n  theme,\n}: any) => {\n  const as = styleAs || asProp\n  const styles = getValueFromTheme(`typography.${[as]}`)({\n    theme,\n  }) as Theme.TypographyType\n  if (!styles) {\n    return ''\n  }\n  const { breakpoints, ...otherProps } = styles\n  return css`\n    ${generateCSSFromTypography(\n      {\n        ...otherProps,\n      },\n      gutterBottom,\n    )}\n    ${() =>\n      breakpoints\n        ? Object.entries(breakpoints).map(\n            ([breakpointFromTypography, typoStyles]) => css`\n              @media screen and ${breakpoint('min-width', <\n                  keyof BreakpointsInterface\n                >breakpointFromTypography)} {\n                ${generateCSSFromTypography(typoStyles || {}, gutterBottom)}\n              }\n            `,\n          )\n        : ``}\n  `\n}\n\ntype BreakpointKeys = keyof BreakpointsInterface\n\ntype GetTypographyValueFromPropertyParameters = [\n  keyof TypographyInterface,\n  keyof TypographyElementStyle,\n  BreakpointKeys?,\n]\n\nexport const getTypographyValueFromProperty = withTheme<\n  GetTypographyValueFromPropertyParameters\n>((theme, element, property, breakpointRule) => {\n  const rules = getValueFromTheme(`typography.${[element]}`)({ theme })\n  if (breakpointRule) {\n    if (rules.breakpoints[breakpointRule]) {\n      return rules.breakpoints[breakpointRule][property]\n    }\n    return ''\n  }\n  return rules[property]\n})\n\nexport const outlineStyle = (\n  theme: ThemeInterface,\n  width: number = 3,\n  offset: number = 0,\n) => css`\n  outline-color: ${themeColor('support', 'focus')({ theme })};\n  outline-style: solid;\n  outline-offset: ${offset}px;\n  outline-width: ${width}px;\n`\n\n/* we have chosen here to use a dubble selector '&&'.  \n This will override a hover state with outlines.\n introduced this when resolving issue: #131\n*/\nexport const focusStyleOutline = (width?: number, offset?: number) => ({\n  theme,\n}: {\n  theme: Theme.ThemeInterface\n}) =>\n  css`\n    &&:focus {\n      ${outlineStyle(theme, width, offset)}\n    }\n  `\n\nexport const focusStyleFill = withTheme(\n  theme => css`\n    &:focus {\n      background-color: ${themeColor('support', 'focus')({ theme })};\n    }\n  `,\n)\n\nexport enum FocusStyleEnum {\n  outline,\n  fill,\n  none,\n}\n\n/**\n * @param  {keyoftypeofFocusStyleEnum='fill'} focusStyle\n *\n * decorates an element with one of the existing focus styles:\n * - outline: draws a border around the element on focus\n * - fill: fills the element background on focus\n * - none: ignored the focus state\n */\nexport const getFocusStyle = (\n  focusStyle: keyof typeof FocusStyleEnum = 'fill',\n) => {\n  const styles = {\n    outline: focusStyleOutline(),\n    fill: focusStyleFill(),\n    none: '',\n  }\n\n  return styles[focusStyle]\n}\n\n/**\n * Util to hide the component for screen readers\n */\nexport const srOnlyStyle = () => ({ srOnly }: { srOnly?: boolean }) =>\n  srOnly\n    ? css`\n        border-width: 0;\n        clip: rect(0, 0, 0, 0);\n        height: 1px;\n        margin: -1px;\n        overflow: hidden;\n        padding: 0;\n        position: absolute;\n        width: 1px;\n      `\n    : ''\n\nexport const svgFill = withTheme<[Theme.ColorType?, string?, string?]>(\n  (theme, colorType, variant = 'main', override) => {\n    if (colorType) {\n      const value = themeColor(colorType, variant, override)({ theme })\n      if (typeof value === 'string') {\n        return css`\n          & svg {\n            rect,\n            polygon,\n            path {\n              fill: ${value};\n            }\n          }\n        `\n      }\n    }\n\n    return ''\n  },\n)\n\n/**\n * Use this util to animate the background-color (or other property), for perceived performance purposes\n * @param theme\n * @param animateLoading\n */\nexport const perceivedLoading = (\n  theme: ThemeInterface,\n  animateLoading: boolean = true,\n) => {\n  const animation = keyframes`\n    0% {\n      background-color: ${themeColor('tint', 'level3')({ theme })};\n    }\n  \n    50% {\n      background-color: ${themeColor('tint', 'level4')({ theme })};\n    }\n    \n    100% {\n      background-color: ${themeColor('tint', 'level3')({ theme })};\n    }\n  `\n\n  return animateLoading\n    ? css`\n        animation: ${animation} 2s ease-in-out infinite;\n      `\n    : css`\n        background-color: ${themeColor('tint', 'level4')({ theme })};\n      `\n}\n\nexport const mapToBreakpoints = (\n  sizes: any,\n  propertyName: string,\n  theme: Theme.ThemeInterface,\n) => {\n  const breakpointVariants = Object.keys(theme.breakpoints) as Array<\n    keyof BreakpointsInterface\n  >\n  return css`\n    ${sizes\n      .map((value: number, index: number) =>\n        index === 0\n          ? `${propertyName}: ${value};`\n          : breakpointVariants[index] &&\n            `\n        @media screen and ${breakpoint('min-width', breakpointVariants[index])({\n          theme,\n        })} {\n          ${propertyName}: ${value};\n        }\n      `,\n      )\n      .join('')}\n  `\n}\n\nexport interface ShowHideTypes {\n  showAt?: keyof BreakpointsInterface\n  hideAt?: keyof BreakpointsInterface\n}\n\ntype ShowHideProps = ThemeProp & ShowHideTypes\n\nexport const showHide = () => ({ hideAt, showAt, theme }: ShowHideProps) => {\n  const hideAtCss = hideAt\n    ? css`\n        @media screen and ${breakpoint('min-width', hideAt)({ theme })} {\n          display: none;\n        }\n      `\n    : ''\n\n  const showAtCss = showAt\n    ? css`\n        @media screen and ${breakpoint('max-width', showAt)({ theme })} {\n          display: none;\n        }\n      `\n    : ''\n\n  return css`\n    ${showAtCss}\n    ${hideAtCss}\n  `\n}\n\n// Function that uses the BACKDROP_Z_INDEX constant to determine the z-index for components rendered with a backdrop\n// The first argument in the curry can be used to raise the z-index for components that need to be displayed above\n// the backdrop, but aren't directly related\nexport const showAboveBackDrop = (show?: boolean) => ({\n  hasBackDrop,\n}: {\n  hasBackDrop?: boolean\n}) =>\n  hasBackDrop || show\n    ? css`\n        z-index: ${BACKDROP_Z_INDEX + 1};\n      `\n    : ''\n\ntype ThemeSpacingParameters = [\n  Theme.Spacing,\n  Theme.Spacing?,\n  Theme.Spacing?,\n  Theme.Spacing?,\n]\n\n/**\n * Retrieve an amount of pixels by passing a factor that will multiply it by the theme's spacing unit\n *\n * @example If the theme's spacing unit is 4px:\n * css`\n *  padding: ${themeSpacing(1, 2, 1, 4)} // padding: 4px 8px 4px 18px;\n *  margin-bottom: ${themeSpacing(3)} // margin-bottom: 12px;\n * `\n */\nexport const themeSpacing = withTheme<ThemeSpacingParameters>(\n  (theme, ...factors) => {\n    const spacing: Theme.Spacing = getValueFromTheme('spacing')({ theme })\n    return factors\n      .map(factor => factor && `${factor * spacing}px`)\n      .join(' ')\n      .trim()\n  },\n)\n\n/**\n * @deprecated Please wrap around the SC styled() method to extend your styles.\n */\nexport const customCss = (props: any) =>\n  props.css &&\n  css`\n    ${props.css}\n  `\nexport interface CustomCssPropsInterface {\n  css?: any\n}\n\nexport type CustomCssPropsType = {\n  css?: any\n}\ntry {\n    // @ts-ignore\n    withTheme.displayName = \"withTheme\";\n    // @ts-ignore\n    withTheme.__docgenInfo = { \"description\": \"Curry function to provide the theme as first parameter, followed up with other parameters\\n@param cb\\n@example const myThemeHelperFunction = withTheme((theme, ...otherParams) => {\\n  ...\\n})\\n\\ncss`\\n ${myThemeHelperFunction(param1, param2)}\\n`\", \"displayName\": \"withTheme\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#withTheme\"] = { docgenInfo: withTheme.__docgenInfo, name: \"withTheme\", path: \"packages/asc-ui/src/utils/themeUtils.ts#withTheme\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    getValueFromTheme.displayName = \"getValueFromTheme\";\n    // @ts-ignore\n    getValueFromTheme.__docgenInfo = { \"description\": \"A shortcut to the `fromProps` that will get a value out of the props.theme object\", \"displayName\": \"getValueFromTheme\", \"props\": { \"0\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"0\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"1\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"1\", \"required\": false, \"type\": { \"name\": \"Function\" } }, \"length\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"length\", \"required\": true, \"type\": { \"name\": \"1 | 2\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#getValueFromTheme\"] = { docgenInfo: getValueFromTheme.__docgenInfo, name: \"getValueFromTheme\", path: \"packages/asc-ui/src/utils/themeUtils.ts#getValueFromTheme\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    themeColor.displayName = \"themeColor\";\n    // @ts-ignore\n    themeColor.__docgenInfo = { \"description\": \"\", \"displayName\": \"themeColor\", \"props\": { \"0\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"0\", \"required\": false, \"type\": { \"name\": \"ColorType\" } }, \"1\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"1\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"2\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"2\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"length\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"length\", \"required\": true, \"type\": { \"name\": \"0 | 1 | 2 | 3\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#themeColor\"] = { docgenInfo: themeColor.__docgenInfo, name: \"themeColor\", path: \"packages/asc-ui/src/utils/themeUtils.ts#themeColor\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    breakpoint.displayName = \"breakpoint\";\n    // @ts-ignore\n    breakpoint.__docgenInfo = { \"description\": \"\", \"displayName\": \"breakpoint\", \"props\": { \"0\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"0\", \"required\": true, \"type\": { \"name\": \"TypeBreakpoint\" } }, \"1\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"1\", \"required\": true, \"type\": { \"name\": \"\\\"mobileS\\\" | \\\"mobileM\\\" | \\\"mobileL\\\" | \\\"tabletS\\\" | \\\"tabletM\\\" | \\\"laptop\\\" | \\\"laptopM\\\" | \\\"laptopL\\\" | \\\"desktop\\\" | \\\"desktopL\\\"\" } }, \"length\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"length\", \"required\": true, \"type\": { \"name\": \"2\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#breakpoint\"] = { docgenInfo: breakpoint.__docgenInfo, name: \"breakpoint\", path: \"packages/asc-ui/src/utils/themeUtils.ts#breakpoint\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    getTypographyValueFromProperty.displayName = \"getTypographyValueFromProperty\";\n    // @ts-ignore\n    getTypographyValueFromProperty.__docgenInfo = { \"description\": \"\", \"displayName\": \"getTypographyValueFromProperty\", \"props\": { \"0\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"0\", \"required\": true, \"type\": { \"name\": \"\\\"a\\\" | \\\"em\\\" | \\\"h1\\\" | \\\"h2\\\" | \\\"h3\\\" | \\\"h4\\\" | \\\"h5\\\" | \\\"h6\\\" | \\\"li\\\" | \\\"p\\\" | \\\"small\\\" | \\\"span\\\" | \\\"fontFamily\\\" | \\\"fontSize\\\"\" } }, \"1\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"1\", \"required\": true, \"type\": { \"name\": \"\\\"color\\\" | \\\"fontSize\\\" | \\\"fontWeight\\\" | \\\"letterSpacing\\\" | \\\"lineHeight\\\" | \\\"marginBottom\\\"\" } }, \"2\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"2\", \"required\": false, \"type\": { \"name\": \"\\\"mobileS\\\" | \\\"mobileM\\\" | \\\"mobileL\\\" | \\\"tabletS\\\" | \\\"tabletM\\\" | \\\"laptop\\\" | \\\"laptopM\\\" | \\\"laptopL\\\" | \\\"desktop\\\" | \\\"desktopL\\\"\" } }, \"length\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"length\", \"required\": true, \"type\": { \"name\": \"2 | 3\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#getTypographyValueFromProperty\"] = { docgenInfo: getTypographyValueFromProperty.__docgenInfo, name: \"getTypographyValueFromProperty\", path: \"packages/asc-ui/src/utils/themeUtils.ts#getTypographyValueFromProperty\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    focusStyleFill.displayName = \"focusStyleFill\";\n    // @ts-ignore\n    focusStyleFill.__docgenInfo = { \"description\": \"\", \"displayName\": \"focusStyleFill\", \"props\": { \"length\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"length\", \"required\": true, \"type\": { \"name\": \"0\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#focusStyleFill\"] = { docgenInfo: focusStyleFill.__docgenInfo, name: \"focusStyleFill\", path: \"packages/asc-ui/src/utils/themeUtils.ts#focusStyleFill\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    getFocusStyle.displayName = \"getFocusStyle\";\n    // @ts-ignore\n    getFocusStyle.__docgenInfo = { \"description\": \"@param  'fill'} focusStyle\\n\\ndecorates an element with one of the existing focus styles:\\n- outline: draws a border around the element on focus\\n- fill: fills the element background on focus\\n- none: ignored the focus state\", \"displayName\": \"getFocusStyle\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#getFocusStyle\"] = { docgenInfo: getFocusStyle.__docgenInfo, name: \"getFocusStyle\", path: \"packages/asc-ui/src/utils/themeUtils.ts#getFocusStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    srOnlyStyle.displayName = \"srOnlyStyle\";\n    // @ts-ignore\n    srOnlyStyle.__docgenInfo = { \"description\": \"Util to hide the component for screen readers\", \"displayName\": \"srOnlyStyle\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#srOnlyStyle\"] = { docgenInfo: srOnlyStyle.__docgenInfo, name: \"srOnlyStyle\", path: \"packages/asc-ui/src/utils/themeUtils.ts#srOnlyStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    svgFill.displayName = \"svgFill\";\n    // @ts-ignore\n    svgFill.__docgenInfo = { \"description\": \"\", \"displayName\": \"svgFill\", \"props\": { \"0\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"0\", \"required\": false, \"type\": { \"name\": \"ColorType\" } }, \"1\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"1\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"2\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"2\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"length\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"length\", \"required\": true, \"type\": { \"name\": \"0 | 1 | 2 | 3\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#svgFill\"] = { docgenInfo: svgFill.__docgenInfo, name: \"svgFill\", path: \"packages/asc-ui/src/utils/themeUtils.ts#svgFill\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    perceivedLoading.displayName = \"perceivedLoading\";\n    // @ts-ignore\n    perceivedLoading.__docgenInfo = { \"description\": \"Use this util to animate the background-color (or other property), for perceived performance purposes\\n@param theme\\n@param animateLoading\", \"displayName\": \"perceivedLoading\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#perceivedLoading\"] = { docgenInfo: perceivedLoading.__docgenInfo, name: \"perceivedLoading\", path: \"packages/asc-ui/src/utils/themeUtils.ts#perceivedLoading\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    showAboveBackDrop.displayName = \"showAboveBackDrop\";\n    // @ts-ignore\n    showAboveBackDrop.__docgenInfo = { \"description\": \"\", \"displayName\": \"showAboveBackDrop\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#showAboveBackDrop\"] = { docgenInfo: showAboveBackDrop.__docgenInfo, name: \"showAboveBackDrop\", path: \"packages/asc-ui/src/utils/themeUtils.ts#showAboveBackDrop\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    themeSpacing.displayName = \"themeSpacing\";\n    // @ts-ignore\n    themeSpacing.__docgenInfo = { \"description\": \"Retrieve an amount of pixels by passing a factor that will multiply it by the theme's spacing unit\\n@example If the theme's spacing unit is 4px:\\ncss`\\npadding: ${themeSpacing(1, 2, 1, 4)} // padding: 4px 8px 4px 18px;\\nmargin-bottom: ${themeSpacing(3)} // margin-bottom: 12px;\\n`\", \"displayName\": \"themeSpacing\", \"props\": { \"0\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"0\", \"required\": true, \"type\": { \"name\": \"number\" } }, \"1\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"1\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"2\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"2\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"3\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"3\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"length\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"length\", \"required\": true, \"type\": { \"name\": \"1 | 2 | 3 | 4\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#themeSpacing\"] = { docgenInfo: themeSpacing.__docgenInfo, name: \"themeSpacing\", path: \"packages/asc-ui/src/utils/themeUtils.ts#themeSpacing\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    customCss.displayName = \"customCss\";\n    // @ts-ignore\n    customCss.__docgenInfo = { \"description\": \"@deprecated Please wrap around the SC styled() method to extend your styles.\", \"displayName\": \"customCss\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/utils/themeUtils.ts#customCss\"] = { docgenInfo: customCss.__docgenInfo, name: \"customCss\", path: \"packages/asc-ui/src/utils/themeUtils.ts#customCss\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css, styledComponents } from '@datapunt/asc-core'\nimport { Props as TypographyProps } from '../Typography/TypographyStyle'\nimport Typography from '../Typography'\n\nexport type Props = TypographyProps & styledComponents.StyledProps<any>\n\nexport const HeaderStyleCSS = css`\n  margin-top: 0;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`\n\nexport default styled(Typography)<Props>`\n  ${HeaderStyleCSS}\n`\ntry {\n    // @ts-ignore\n    HeadingStyle.displayName = \"HeadingStyle\";\n    // @ts-ignore\n    HeadingStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"HeadingStyle\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Heading/HeadingStyle.ts#HeadingStyle\"] = { docgenInfo: HeadingStyle.__docgenInfo, name: \"HeadingStyle\", path: \"packages/asc-ui/src/components/Heading/HeadingStyle.ts#HeadingStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport { themeColor } from '../../utils'\nimport {\n  svgFill,\n  FocusStyleEnum,\n  getFocusStyle,\n  themeSpacing,\n} from '../../utils/themeUtils'\nimport Typography, { TypographyProps } from '../Typography'\nimport IconStyle from '../Icon/IconStyle'\n\nexport enum LinkVariants {\n  inline,\n  blank,\n  withChevron = 'with-chevron',\n}\n\nexport type Props = {\n  variant?: keyof typeof LinkVariants\n  /**\n   * @deprecated\n   */\n  linkType?: keyof typeof LinkVariants\n  color?: string\n  focusStyle?: keyof typeof FocusStyleEnum\n} & TypographyProps\n\nexport const BlankLinkStyleCSS = css`\n  display: inline-block;\n  text-decoration: none;\n  color: inherit;\n`\nexport const InlineLinkStyleCSS = css`\n  display: inline-block;\n  color: ${themeColor('primary')};\n\n  &:hover {\n    color: ${themeColor('secondary')};\n  }\n`\nexport const DefaultLinkStyleCSS = css<Props>`\n  display: inline-flex;\n  text-decoration: none;\n  font-weight: 700;\n  color: ${({ color: colorOverride, theme }) =>\n    themeColor('tint', 'level7', colorOverride)({ theme })};\n\n  ${IconStyle} {\n    margin: ${themeSpacing(1)};\n    ${({ color: colorOverride, theme }) =>\n      svgFill('tint', 'level7', colorOverride)({ theme })};\n  }\n\n  &:hover {\n    color: ${({ color: colorOverride, theme }) =>\n      themeColor('secondary', 'main', colorOverride)({ theme })};\n    text-decoration: underline;\n    ${IconStyle} {\n      ${({ color: colorOverride, theme }) =>\n        svgFill('secondary', 'main', colorOverride)({ theme })};\n    }\n  }\n`\n\nexport const LinkContent = styled.span`\n  width: 100%; /* IE11 Fix */\n`\n\nexport default styled(Typography)<Props>`\n  ${({ focusStyle }) => getFocusStyle(focusStyle)}\n  ${({ variant }) => {\n    switch (variant) {\n      case 'blank':\n        return BlankLinkStyleCSS\n      case 'inline':\n        return InlineLinkStyleCSS\n      default:\n        return DefaultLinkStyleCSS\n    }\n  }}\n`\ntry {\n    // @ts-ignore\n    LinkContent.displayName = \"LinkContent\";\n    // @ts-ignore\n    LinkContent.__docgenInfo = { \"description\": \"\", \"displayName\": \"LinkContent\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLSpanElement) => void) | RefObject<HTMLSpanElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Link/LinkStyle.ts#LinkContent\"] = { docgenInfo: LinkContent.__docgenInfo, name: \"LinkContent\", path: \"packages/asc-ui/src/components/Link/LinkStyle.ts#LinkContent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    LinkStyle.displayName = \"LinkStyle\";\n    // @ts-ignore\n    LinkStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"LinkStyle\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Link/LinkStyle.ts#LinkStyle\"] = { docgenInfo: LinkStyle.__docgenInfo, name: \"LinkStyle\", path: \"packages/asc-ui/src/components/Link/LinkStyle.ts#LinkStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport { mapToBreakpoints } from '../../utils/themeUtils'\n\ntype Props = {\n  width?: number | Array<Number>\n}\n\nconst GridItemStyle = styled.div<Props>`\n  position: relative;\n  ${({ width, theme }) =>\n    width &&\n    (Array.isArray(width)\n      ? css`\n          ${mapToBreakpoints(width, 'max-width', theme)}\n          ${mapToBreakpoints(width, 'flex-basis', theme)}\n        `\n      : css`\n          flex-basis: ${width}%;\n        `)}\n`\n\nexport default GridItemStyle\n","import styled, { css } from '@datapunt/asc-core'\nimport GridItemStyle from './GridItemStyle'\n\ntype Props = {\n  direction?: string\n  wrap?: string\n  gutterY?: number\n  gutterX?: number\n  collapse?: boolean\n}\n\nconst GridContainerStyle = styled.div<Props>`\n  display: flex;\n  flex-direction: ${({ direction }) => direction || 'row'};\n  flex-wrap: ${({ wrap }) => wrap || 'nowrap'};\n  ${({ collapse, gutterX }) =>\n    gutterX &&\n    collapse &&\n    css`\n      margin-left: ${gutterX * -1}px;\n      margin-right: ${gutterX * -1}px;\n    `}\n\n  ${({ collapse, gutterY }) =>\n    gutterY &&\n    collapse &&\n    css`\n      margin-top: ${gutterY * -1}px;\n      margin-bottom: ${gutterY * -1}px;\n    `}\n\n  ${GridItemStyle} {\n    ${({ gutterY }) =>\n      gutterY &&\n      css`\n        padding-top: ${gutterY}px;\n        padding-bottom: ${gutterY}px;\n      `}\n\n    ${({ gutterX }) =>\n      gutterX &&\n      css`\n        padding-left: ${gutterX}px;\n        padding-right: ${gutterX}px;\n      `}\n  }\n`\n\nexport default GridContainerStyle\n","import styled, { css, Theme } from '@datapunt/asc-core'\nimport { breakpoint, themeColor, getValueFromTheme } from '../../utils'\n\nexport type Props = {\n  beamColor?: keyof Theme.SupportPaletteInterface\n\n  // this property defaults to the maxGridWidth of the current grid layout\n  maxWidth?: number\n}\n\nconst ContainerWrapperStyle = styled.div<{}>`\n  display: flex;\n  justify-content: center;\n`\nconst ContainerStyle = styled.div<Props>`\n  width: 100%;\n  max-width: ${({ maxWidth, theme }) =>\n    `${maxWidth || getValueFromTheme('maxContainerWidth')({ theme })}px`};\n  flex-grow: 1;\n  position: relative;\n\n  @media screen and ${breakpoint('min-width', 'laptopM')} {\n    margin: 0 24px;\n    ${({ beamColor }) =>\n      beamColor &&\n      css`\n        &::after {\n          content: '';\n          background-color: ${themeColor('support', beamColor)};\n          bottom: 0;\n          display: block;\n          position: absolute;\n          right: -24px;\n          top: 0;\n          width: 24px;\n        }\n      `}\n  }\n`\n\nexport { ContainerWrapperStyle, ContainerStyle }\n","import React from 'react'\nimport { ContainerStyle, ContainerWrapperStyle, Props } from './ContainerStyle'\n\nconst Container: React.FC<Props & React.HTMLAttributes<HTMLDivElement>> = ({\n  beamColor,\n  maxWidth,\n  children,\n  ...otherProps\n}) => (\n  <ContainerWrapperStyle>\n    <ContainerStyle beamColor={beamColor} maxWidth={maxWidth} {...otherProps}>\n      {children}\n    </ContainerStyle>\n  </ContainerWrapperStyle>\n)\n\nexport default Container\n","import styled from '@datapunt/asc-core'\nimport { breakpoint, themeColor } from '../../../utils'\n\nexport const EDITORIAL_META_MARGIN_TOP = 20\nexport const EDITORIAL_META_LINE_HEIGHT = 16\n\nexport default styled.ul`\n  margin: 15px 0 20px 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  font-size: 14px;\n  line-height: ${EDITORIAL_META_LINE_HEIGHT}px;\n  color: ${themeColor('tint', 'level5')};\n\n  @media screen and ${breakpoint('min-width', 'laptopM')} {\n    margin: ${EDITORIAL_META_MARGIN_TOP}px 0 24px 0;\n  }\n`\n\nexport const EditorialMetaListItemStyle = styled.li`\n  &:not(:last-of-type) {\n    position: relative;\n    margin-right: 20px;\n    &::after {\n      content: '';\n      height: 100%;\n      width: 1px;\n      background-color: ${themeColor('tint', 'level5')};\n      display: inline-block;\n      position: absolute;\n      right: -10px;\n    }\n  }\n`\ntry {\n    // @ts-ignore\n    EditorialMetaListStyle.displayName = \"EditorialMetaListStyle\";\n    // @ts-ignore\n    EditorialMetaListStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"EditorialMetaListStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLUListElement) => void) | RefObject<HTMLUListElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Editorial/EditorialMetaList/EditorialMetaListStyle.ts#EditorialMetaListStyle\"] = { docgenInfo: EditorialMetaListStyle.__docgenInfo, name: \"EditorialMetaListStyle\", path: \"packages/asc-ui/src/components/Editorial/EditorialMetaList/EditorialMetaListStyle.ts#EditorialMetaListStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    EditorialMetaListItemStyle.displayName = \"EditorialMetaListItemStyle\";\n    // @ts-ignore\n    EditorialMetaListItemStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"EditorialMetaListItemStyle\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLLIElement) => void) | RefObject<HTMLLIElement>\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"\\\"symbol\\\" | \\\"object\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"big\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | ... 156 more ... | FunctionComponent<...>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Editorial/EditorialMetaList/EditorialMetaListStyle.ts#EditorialMetaListItemStyle\"] = { docgenInfo: EditorialMetaListItemStyle.__docgenInfo, name: \"EditorialMetaListItemStyle\", path: \"packages/asc-ui/src/components/Editorial/EditorialMetaList/EditorialMetaListStyle.ts#EditorialMetaListItemStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled, { css } from '@datapunt/asc-core'\nimport TypographyStyle, {\n  Props as TypographyProps,\n} from '../Typography/TypographyStyle'\n\nexport type Props = TypographyProps\n\nexport const ParagraphStyleCSS = css<Props>`\n  margin-top: 0;\n  color: inherit;\n`\n\nexport default styled(TypographyStyle)<Props>`\n  ${ParagraphStyleCSS};\n`\ntry {\n    // @ts-ignore\n    ParagraphStyle.displayName = \"ParagraphStyle\";\n    // @ts-ignore\n    ParagraphStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"ParagraphStyle\", \"props\": { \"strong\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"strong\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLParagraphElement) => void) | RefObject<HTMLParagraphElement>\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"gutterBottom\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"gutterBottom\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"styleAs\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"styleAs\", \"required\": false, \"type\": { \"name\": \"\\\"a\\\" | \\\"em\\\" | \\\"h1\\\" | \\\"h2\\\" | \\\"h3\\\" | \\\"h4\\\" | \\\"h5\\\" | \\\"h6\\\" | \\\"li\\\" | \\\"p\\\" | \\\"small\\\" | \\\"span\\\"\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": false, \"type\": { \"name\": \"\\\"em\\\"\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Paragraph/ParagraphStyle.ts#ParagraphStyle\"] = { docgenInfo: ParagraphStyle.__docgenInfo, name: \"ParagraphStyle\", path: \"packages/asc-ui/src/components/Paragraph/ParagraphStyle.ts#ParagraphStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from '@datapunt/asc-core'\nimport { flexboxMinHeightFix } from '../shared/ie-fixes'\nimport { breakpoint, themeColor } from '../../utils'\nimport HeadingStyle from '../Heading/HeadingStyle'\n\nexport type Props = {\n  backgroundColor?: string\n}\n\nconst TopBarStyle = styled.header<Props>`\n  display: flex;\n  position: relative;\n  align-items: center;\n  z-index: 0;\n  padding: 0 10px;\n  background-color: ${({ backgroundColor, theme }) =>\n    backgroundColor || themeColor('tint', 'level1')({ theme })};\n  ${flexboxMinHeightFix()};\n\n  @media screen and ${breakpoint('min-width', 'tabletS')} {\n    padding: 0 15px;\n  }\n\n  ${HeadingStyle} {\n    flex-grow: 1;\n    margin-bottom: 0;\n  }\n`\n\nexport default TopBarStyle\n","import styled, { css, Theme } from '@datapunt/asc-core'\nimport { getTypographyFromTheme, themeColor } from '../../utils'\n\nimport TypographyElements = Theme.TypographyElements\n\nexport type Props = {\n  gutterBottom?: number\n  element?: Variant\n  color?: Theme.ColorType\n  fontSize?: number\n  styleAs?: keyof TypographyElements\n  as?: any\n  strong?: boolean\n}\n\nexport const defaultTypographyStyles = {\n  em: css`\n    font-style: italic;\n  `,\n}\n\nexport type Variant = keyof typeof defaultTypographyStyles\n\nconst getProperty = <T, K extends keyof T>(obj: T, key: K) => obj[key]\n\nexport default styled.p<Props>`\n  ${({ as }) => getProperty(defaultTypographyStyles, as)};\n  margin: 0;\n  ${getTypographyFromTheme()};\n  font-stretch: normal;\n  letter-spacing: normal;\n  ${({ strong }) =>\n    strong &&\n    css`\n      font-weight: 700;\n      color: ${themeColor('tint', 'level7')};\n    `}\n  ${({ color }) =>\n    color &&\n    css`\n      color: ${themeColor(color)};\n    `}\n  ${({ fontSize }) =>\n    fontSize &&\n    css`\n      font-size: ${fontSize}px;\n    `}\n`\ntry {\n    // @ts-ignore\n    TypographyStyle.displayName = \"TypographyStyle\";\n    // @ts-ignore\n    TypographyStyle.__docgenInfo = { \"description\": \"\", \"displayName\": \"TypographyStyle\", \"props\": { \"strong\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"strong\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"((instance: HTMLParagraphElement) => void) | RefObject<HTMLParagraphElement>\" } }, \"as\": { \"defaultValue\": null, \"description\": \"Typing Note: prefer using .withComponent for now as it is actually type-safe.\\n\\nString types need to be cast to themselves to become literal types (as={'a' as 'a'}).\", \"name\": \"as\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"gutterBottom\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"gutterBottom\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"styleAs\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"styleAs\", \"required\": false, \"type\": { \"name\": \"\\\"a\\\" | \\\"em\\\" | \\\"h1\\\" | \\\"h2\\\" | \\\"h3\\\" | \\\"h4\\\" | \\\"h5\\\" | \\\"h6\\\" | \\\"li\\\" | \\\"p\\\" | \\\"small\\\" | \\\"span\\\"\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": false, \"type\": { \"name\": \"\\\"em\\\"\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ThemeInterface\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"packages/asc-ui/src/components/Typography/TypographyStyle.ts#TypographyStyle\"] = { docgenInfo: TypographyStyle.__docgenInfo, name: \"TypographyStyle\", path: \"packages/asc-ui/src/components/Typography/TypographyStyle.ts#TypographyStyle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAGA;;;;;;;AC0CA;AChCA;AACA;;;;AAIA;AACA;;;;AAVA;AAAA;AAgBA;AACA;AACA;;;AAsBA;;AAEA;AACA;;AAIA;;;AAGA;AApBA;AAuBA;ACbA;AAIA;;;;ACjBA;;ACFA;;AC7BA;;;;;;;AAOA;;;AAIA;;;;;ACHA;AAGA;AACA;;;;AAIA;AACA;;;AAKA;;;;;AAKA;AACA;AAGA;AC3BA;;;;;AAMA;AACA;;;;;;;;AAUA;;;;;;;;AAUA;;;;ACvBA;AACA;;;AAGA;;;AAGA;AACA;;ACOA;;AClBA;;;AAGA;;;AAGA;;AAIA;AACA;AAEA;;AAEA;;;;;AAKA;;;AAIA;;ACrBA;AACA;AACA;;AAIA;AACA;AACA;AACA;;;;;AAKA;;;;AAKA;;;;;;;;;;ACqCA;;;;;;;;;;AAUA;AA5DA;AAQA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAgCA;;AAIA;;;;;;;;AAQA;AACA;AAGA;AACA;;;AAGA;;;AAKA;;AAMA;AACA;AACA;;;;;;AAMA;AAMA;;;;;AAKA;AAIA;AClHA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AACA;;;;;;;;;AAWA;ACjCA;ACEA;;;;;;ACFA;AAIA;ACbA;;;;;;;;;AASA;;;;AAIA;;;AAIA;;;;;ACbA;ACWA;;;;AAIA;;;;AA2EA;AApEA;;;;;;;;AAQA;;AAEA;AACA;;;;AAIA;AAGA;AACA;;AAEA;;;;;;;;;AASA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;;;;;;;AAOA;;;;;AAKA;;;;AAIA;;;AAIA;AACA;AACA;ACtFA;;ACHA;AAEA;ACAA;AACA;AACA;;;;;;AAQA;AACA;AAEA;;ACjBA;;;;;ACIA;;;;;ACDA;;;AAIA;;;ACDA;AACA;AACA;AAEA;;;;;;;;;ACEA;;;;AAIA;AAGA;AACA;;;;;AAMA;;;;ACpBA;;;;AAIA;;;;AAIA;AAGA;;;AChBA;;;;;AAOA;;;;;;;;;;;ACMA;AACA;AACA;;;;ACfA;ACSA;AAGA;;AAIA;;;;;;;AAOA;AAGA;AACA;;;;;;;;;;;;;AAaA;;;AAIA;AACA;;;;;;;;;;;;;;;;AAiBA;AC5DA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAIA;AACA;AACA;;AAEA;AAEA;;ACNA;;AA2BA;;AC3BA;;AAEA;AACA;AACA;;AAKA;;;AAGA;;;AAKA;AAGA;AACA;;;;AAIA;;;AAOA;AAMA;;;AAMA;;AAKA;;;AAKA;;;;;;ACtDA;AACA;AAIA;AACA;AAEA;ACpBA;AAEA;AACA;;;;AAIA;AACA;AACA;;;;;AAKA;;;;AAIA;AACA;;;;AASA;AC1BA;AACA;;;AAIA;;AAIA;;;;ACZA;AACA;ACJA;;;AAGA;AACA;AACA;AACA;;;AAGA;;AAEA;;;AAGA;;AAEA;;;AAIA;;;ACWA;;ACvBA;AACA;AAKA;AAGA;;;ACTA;;;;;;AAMA;AACA;;AAEA;;AAIA;;;;;;;ACzBA;;AAaA;AACA;AACA;AACA;AACA;;;;;;;AASA;;;;AAIA;AAEA;AC5BA;;;;;;;AAOA;;;;;;;;AAQA;;;;;;;;AAUA;AACA;AAEA;;;ACvBA;;;;;AAQA;;;;ACyBA;;;AAGA;;;AAKA;AAIA;AACA;;AAIA;AACA;;AAEA;AAsBA;AACA;;AAGA;;;AAGA;AAGA;;AAEA;;;AAIA;;;AAKA;AACA;;;;;;;AAOA;;;;AAMA;;;;ACnFA;AACA;AACA;;;;;;;;;;;;;;;;;AAkBA;;;AAKA;AAaA;AACA;;AAGA;;;;;AAOA;AACA;AAIA;AAGA;;;;;AAOA;AAGA;AACA;;;AAGA;AAGA;;;AAGA;;;;;;;AAUA;AACA;;;;;;;;;;;;;;;;;AAoBA;;;ACtIA;;;;AAIA;;;;;AAKA;AACA;;AAEA;;;;;AAKA;;;AAIA;;;;;;;;ACpBA;;;AAKA;;;ACJA;AACA;AAEA;;;;;ACMA;AACA;;;AAGA;;AAEA;;;;AAIA;;AAEA;;;AAGA;AAGA;AC7BA;;;;;;;;;;AAUA;;;;AAIA;AAGA;;;;;AAOA;ACjBA;AACA;AAGA;AACA;;;;;;;;;;AAUA;AACA;;;AAeA;AC5CA;;AAEA;;;;;;;;;ACFA;;;;;;;;;ACiBA;AAIA;AACA;AACA;;;;;;;AAQA;;;;;;;;ACxBA;;;;;;;;;AASA;;AAEA;AACA;;;;;AAKA;AAGA;;;;;;AAMA;;AAIA;;;;AC5BA;AAGA;;;AAGA;ACMA;AApBA;AACA;AACA;;AAEA;;;;;;;;;;;;;;AAiBA;;;;;ACrBA;;;;;;;;ACcA;;;;;;;;;AASA;;;AAGA;;;;AAIA;AAKA;;;AAIA;AAEA;AChCA;AACA;ACfA;AACA;;;;;ADqBA;AAGA;;;AAGA;;;;;;AAMA;;;;AAKA;;;;;;;AElBA;;;;;AAKA;AACA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;AAqBA;AAhBA;;;AAMA;;;;AAIA;AACA;;;AAMA;;;ACtEA;;;ACiBA;AHxBA;AACA;AG0BA;AACA;AACA;;;AAGA;AACA;;;AAGA;;AHpCA;;AGwCA;AACA;;AAKA;;;;;AAKA;AACA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;;;AAGA;;;;;;AAMA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;;;;;AAMA;AAEA;;;ACtFA;AJbA;;;AIiBA;AACA;ACkBA;;;;;AClBA;AACA;;AAIA;;;;;;ACnBA;;AC+CA;AAvCA;;;;;;;;AAQA;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;ACpBA;AARA;AACA;AAEA;;ACGA;ACRA;AAEA;;;;ACIA;AACA;AACA;AACA;AACA;;AAGA;;;ACVA;;ACJA;;ACGA;ACFA;;;AAGA;;;AAIA;;ACLA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;;AAIA;;;AAGA;AACA;;;;AAMA;;;;;;ACZA;;AAbA;;;;;;;;AAQA;;;ACoBA;AAtBA;;;;;;AAMA;;AAEA;;AAIA;;ACXA;ACKA;AACA;AACA;AACA;AACA;;AAEA;AAGA;;;AAGA;AACA;;AAEA;AACA;AACA;;;;AAIA;AAGA;;;;;;;ACXA;AACA;;;;;;;;;AASA;;;;AAMA;;AAGA;;AA4KA;;;;;;;;;;;AAWA;AACA;;;;AAMA;;AAEA;AACA;AA7LA;AAYA;AACA;AACA;AACA;;AAEA;;AAIA;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AAGA;AACA;;;AAQA;AAEA;AACA;AACA;;AAEA;;AAOA;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;;;;;;AAOA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAIA;AAEA;AACA;;AAEA;;AAGA;AAEA;AACA;;AAEA;AACA;;AAEA;;AAGA;AAGA;AAGA;AAEA;;;AAGA;AAEA;;;;AAIA;AAGA;AAEA;;;AAsDA;AACA;AACA;;;;;;AAQA;;;;;;;;AAQA;AACA;AACA;;AAEA;AAGA;AACA;;;AAGA;;;;AASA;AC1QA;AACA;AAEA;;AAGA;;;AAGA;AAGA;;;;;;AAMA;AAGA;AACA;AACA;AACA;;AAEA;;;AChCA;;;AALA;;;ACFA;AC2EA;AACA;AACA;AACA;AACA;AACA;AAKA;AAeA;AAMA;AAIA;AAGA;;AAIA;AAYA;AAkBA;;AAEA;AACA;AAOA;;AAOA;;AAIA;;AAGA;;AAKA;;;;;;;;;AAyCA;;;;;AAYA;;;AAOA;;AAeA;;;;AAIA;;;;AAIA;;AAIA;AAEA;AAEA;AACA;AAIA;AASA;AAwBA;AAGA;;;AAIA;AAIA;;;AAIA;AAGA;AACA;AAOA;AAOA;AAEA;AAkCA;AASA;;;;;;ACrXA;AACA;AAEA;;;;ACeA;;AAEA;AACA;;AAEA;;AAGA;;;;AAIA;AACA;AAEA;AACA;AACA;;;;AAKA;;AAGA;AACA;;;AAMA;;AAIA;AACA;AACA;AAWA;;ACxEA;AAIA;AACA;AAEA;AACA;;ACNA;;AAEA;AACA;AACA;AAIA;AACA;;;AAGA;AAIA;AACA;;;AAGA;AACA;AAGA;AACA;;;AAGA;AAGA;AACA;;;AAKA;;;AClCA;;AAEA;;;;AAKA;;AAEA;;;AAKA;;;;;;;;;;ACZA;;;;;;;ACHA;AACA;AACA;AACA;AACA;;AAIA;;;;;;;;AAQA;;;;;;AAOA;;;ACxBA;AACA;AAEA;;;;;;ACAA;AAEA;AACA;AACA;;;;AAIA;;;;AAMA;;ACJA;AACA;;AAEA;;;AAGA;;AAIA;;AAEA;AAGA;;AAEA;AAGA;;AAGA","sourceRoot":""}